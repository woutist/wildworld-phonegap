/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./www/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./www/js/cookies.js":
/*!***************************!*\
  !*** ./www/js/cookies.js ***!
  \***************************/
/*! exports provided: setCookies, removeCookies, getCookies */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setCookies\", function() { return setCookies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeCookies\", function() { return removeCookies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCookies\", function() { return getCookies; });\n/* harmony import */ var _varibles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./varibles */ \"./www/js/varibles.js\");\n\nvar setCookies = function setCookies(name, value, days) {\n  if (_varibles__WEBPACK_IMPORTED_MODULE_0__[\"detectionDevice\"]) {\n    localStorage.setItem(name, value);\n  } else {\n    var expires;\n\n    if (days) {\n      var data = new Date();\n      data.setTime(data.getTime() + days * 24 * 60 * 60 * 1000); //data.setTime(data.getTime()+(2*60*1000));     // na dwie minuty\n\n      expires = \"; expires=\" + data.toGMTString();\n    } else {\n      expires = \"\";\n    }\n\n    document.cookie = name + \"=\" + value + expires + \"; path=/\";\n  }\n};\nvar removeCookies = function removeCookies(name) {\n  if (_varibles__WEBPACK_IMPORTED_MODULE_0__[\"detectionDevice\"]) {\n    localStorage.removeItem(name);\n  } else {\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  }\n};\nvar getCookies = function getCookies(name, array) {\n  if (_varibles__WEBPACK_IMPORTED_MODULE_0__[\"detectionDevice\"]) {\n    if (array) {\n      return JSON.parse(localStorage.getItem(name));\n    } else {\n      return localStorage.getItem(name);\n    }\n  } else {\n    if (document.cookie !== \"\") {\n      var cookies = document.cookie.split(/; */);\n\n      for (var i = 0; i < cookies.length; i++) {\n        var nameCookie = cookies[i].split(\"=\")[0];\n        var valueCookie = cookies[i].split(\"=\")[1];\n\n        if (nameCookie === decodeURIComponent(name)) {\n          return decodeURIComponent(valueCookie);\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./www/js/cookies.js?");

/***/ }),

/***/ "./www/js/main.js":
/*!************************!*\
  !*** ./www/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cookies */ \"./www/js/cookies.js\");\n/* harmony import */ var _varibles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./varibles */ \"./www/js/varibles.js\");\nvar _this = undefined;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\nvar map,\n    unlockLevels,\n    amountLevels,\n    bgMenu,\n    levelFile = {\n  name: 'level1',\n  activeIdLevel: 1,\n  readyLoad: false,\n  blockedKeys: false,\n  backgroundLevel: false,\n  backgroundColor: false,\n  backgroundParallax: false\n},\n    tileSize = 16,\n    layer,\n    layerDeep,\n    layerObject,\n    fispeed = [90, 110, 130],\n    wspInkub = [],\n    facing = 'right',\n    cursors,\n    jumpButton,\n    fireButton,\n    bg,\n    bg2,\n    oFog,\n    ground,\n    playGame = {\n  main: false\n},\n    timeLoop = 1,\n    timer,\n    timerTotal = 0,\n    timerLimit = false,\n    saveX = 0,\n    saveY = 0,\n    jumpKillF = false,\n    jumpKillY = false,\n    proportiesMap = [],\n    oneHP = 0,\n    keys = 0,\n    amountMainLife = 3,\n    amountLife = 3,\n    amountBullet = 60,\n    theEndCredits = false,\n    moveX,\n    moveY,\n    playerScaleBig = 1.08,\n    playerJumpVelocityNormalBig = 520,\n    playerJumpVelocityNormalSmall = 430,\n    playerJumpVelocityWaterBig = 290,\n    playerJumpVelocityWaterSmall = 200;\n\nvar preload = function preload() {\n  game.load.tilemap('level1', 'images/level1.json', null, Phaser.Tilemap.TILED_JSON); // example full options:\n  // proportiesMap[1] = {\n  //     background:\"background1\",\n  //     backgroundSecond:\"background1_1\",\n  //     backgroundColor:\"#f3f5ff\",\n  //     fog:\"yellowFog\",\n  //     fogStop: false,\n  //     fogPositionY:520,\n  //     fogSpeed:0.25,\n  //     positionGround:672,\n  //     parallax:true,\n  //     timeLimit: 120, // sec\n  //     bgAudio: 'bg1'\n  // };\n\n  proportiesMap[1] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: 520,\n    fogSpeed: 0,\n    //0.25,\n    positionGround: 672,\n    parallax: true,\n    timeLimit: 200,\n    // sec\n    bgAudio: 'bg1'\n  };\n  game.load.tilemap('level2', 'images/level2.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[2] = {\n    background: \"background4\",\n    backgroundMoveX: 500,\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: 520,\n    fogSpeed: 0,\n    //0.25,\n    positionGround: 672,\n    parallax: true,\n    timeLimit: 200 // sec\n    //bgAudio: 'bg1'\n    // background: \"background2\",\n    // backgroundColor: \"#f3f5ff\",\n    // fog: \"whiteFog\",\n    // fogSpeed: 2,\n    // positionGround: true,\n    // parallax: true\n\n  };\n  game.load.tilemap('level3', 'images/level3.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[3] = {\n    background: \"background4\",\n    backgroundMoveX: 800,\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: 0,\n    fogSpeed: 0,\n    //0.25,\n    positionGround: 96,\n    // 271\n    parallax: true,\n    timeLimit: 200 // sec\n    // background: \"background3\",\n    // backgroundColor: \"#def7c3\",\n    // fog: \"yellowFog\",\n    // fogPositionY: 0,\n    // positionGround: true,\n    // parallax: false\n\n  };\n  game.load.tilemap('level4', 'images/level4.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[4] = {\n    background: \"background4\",\n    backgroundMoveX: 1000,\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: -tileSize,\n    positionGround: 4 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level5', 'images/level5.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[5] = {\n    background: \"background1\",\n    backgroundColor: \"#ffffff\",\n    fog: \"yellowFog\",\n    positionGround: true,\n    parallax: true\n  };\n  game.load.tilemap('level6', 'images/level6.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[6] = {\n    background: \"background1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    positionGround: true,\n    parallax: true\n  };\n  game.load.tilemap('level7', 'images/level7.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[7] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogSpeed: 0,\n    positionGround: true,\n    parallax: true\n  };\n  game.load.tilemap('level8', 'images/level8.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[8] = {\n    background: \"background1\",\n    backgroundSecond: \"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    positionGround: true,\n    parallax: true\n  };\n  game.load.tilemap('level9', 'images/level9.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[9] = {\n    background: \"background3\",\n    backgroundColor: \"#def7c3\",\n    fog: \"yellowFog\",\n    positionGround: true,\n    parallax: false\n  };\n  game.load.tilemap('level10', 'images/level10.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[10] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level11', 'images/level11.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[11] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level12', 'images/level12.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[12] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level13', 'images/level13.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[13] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level14', 'images/level14.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[14] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level15', 'images/level15.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[15] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level16', 'images/level16.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[16] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: tileSize,\n    positionGround: 7 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level17', 'images/level17.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[17] = {\n    background: \"background4\",\n    //backgroundSecond:\"background1_1\",\n    backgroundColor: \"#f3f5ff\",\n    fog: \"yellowFog\",\n    fogPositionY: 12 * tileSize,\n    positionGround: 19 * tileSize,\n    parallax: true\n  };\n  game.load.tilemap('level18', 'images/level18.json', null, Phaser.Tilemap.TILED_JSON);\n  proportiesMap[18] = {\n    background: \"the-end\",\n    backgroundColor: \"#000000\",\n    fog: false,\n    positionGround: false,\n    parallax: false\n  };\n  game.load.image('tiles-1', 'images/tiles-1.png');\n  game.load.image('blank-tile', 'images/blank-tile.png'); //game.load.spritesheet('dude', 'images/, 35, 48);\n\n  game.load.spritesheet('dude', 'images/players1.png', 48, 64);\n  game.load.spritesheet('intruder1', 'images/intruders4.png', 48, 64);\n  game.load.spritesheet('intruder2', 'images/intruders2.png', 48, 64);\n  game.load.spritesheet('intruder3', 'images/intruders3.png', 48, 64);\n  game.load.spritesheet('intruder4', 'images/snake3.png', 71, 33);\n  game.load.spritesheet('intruder5', 'images/condor.png', 71, 68); //game.load.spritesheet('intruder', 'images/intruder2.png', 48, 48);\n\n  game.load.image('backgroundMenu', 'images/menu.png');\n  game.load.image('boxMenu', 'images/box-menu4.png', 640, 290);\n  game.load.image('boxTopMenu', 'images/top-menu.png');\n  game.load.image('background1', 'images/background1.png');\n  game.load.image('background1_1', 'images/background1_1.png');\n  game.load.image('background2', 'images/background2_1.png');\n  game.load.image('background3', 'images/background3.png');\n  game.load.image('background4', 'images/background4.png');\n  game.load.image('tile-size-black', 'images/tile-size-black.png');\n  game.load.image('the-end', 'images/the-end.png');\n  game.load.spritesheet('buttonsWindowMenu', 'images/buttons.png', 112, 48);\n  game.load.spritesheet('buttonsIcons', 'images/icons.png', 48, 48);\n  game.load.spritesheet('buttonLevel', 'images/button-level.png', 64, 64);\n  game.load.spritesheet('buttonNavigation', 'images/navigations1.png', 112, 112);\n  game.load.image('buttonPause', 'images/pause.png');\n  game.load.spritesheet('lifes-single-bar', 'images/lifes-single-bar.png', 58, 16);\n  game.load.spritesheet('log', 'images/log.png', 16, 16);\n  game.load.image('yellowFog', 'images/fog-yellow.png');\n  game.load.image('whiteFog', 'images/fog-white.png');\n  game.load.image('ground', 'images/ground.png'); //game.load.spritesheet('coin', 'images/nu1.png', 24,32);\n\n  game.load.spritesheet('coin', 'images/nu3.png', 16, 24);\n  game.load.spritesheet('Life', 'images/LifeFull.png', 16, 31);\n  game.load.spritesheet('Life2', 'images/LifeSingle.png', 16, 24);\n  game.load.spritesheet('key', 'images/key.png', 16, 43);\n  game.load.spritesheet('door', 'images/door2.png', 16, 128);\n  game.load.image('lock', 'images/lock1.png');\n  game.load.image('cactus', 'images/cactus.png');\n  game.load.image('grassLr', 'images/grass_lr.png');\n  game.load.spritesheet('grass-lr-anim', 'images/grass_anim8.png', 34.5, 32); //32,32\n\n  game.load.image('bullet', 'images/bullet.png');\n  game.load.spritesheet('bullets_gun', 'images/gun-bullets6.png', 20, 28);\n  game.load.spritesheet('end_level', 'images/end_level.png', 100, 130);\n  game.load.spritesheet('save_level', 'images/save-level2.png', 100, 130);\n  game.load.spritesheet('fire_up', 'images/fire_up3.png', 24, 24);\n  game.load.spritesheet('fire_down', 'images/fire_down3.png', 24, 24);\n  game.load.spritesheet('fire_left', 'images/fire_left3.png', 24, 24);\n  game.load.spritesheet('fire_right', 'images/fire_right3.png', 24, 24);\n  game.load.spritesheet('windmill', 'images/windmill_2.png', 120, 322);\n  game.load.image('windmill_1_new', 'images/windmill_1_5_new.png');\n  game.load.image('windmill_2_new', 'images/windmill_2_5_new.png');\n  game.load.image('gun', 'images/gun2.png');\n  game.load.image('cave', 'images/cave.png');\n  game.load.image('building2', 'images/building2p.png');\n  game.load.image('building3', 'images/building3p.png');\n  game.load.spritesheet('mine-part-2', 'images/mine-part2-4.png', 175, 331);\n  game.load.image('mine-part-1', 'images/mine-part1-6.png'); //game.load.spritesheet('water', 'images/water_2.png', 128, 32);\n  //game.load.spritesheet('water', 'images/water_3.png', 192, 32);\n\n  game.load.spritesheet('water-red', 'images/water_red6.png', 256, 32);\n  game.load.spritesheet('water', 'images/water_4.png', 256, 32);\n  game.load.spritesheet('splash', 'images/splash7.png', 84, 38);\n  game.load.spritesheet('splash-water-red', 'images/splash-red9.png', 84, 38);\n  game.load.spritesheet('fireb', 'images/fish7.png', 16, 40);\n  game.load.spritesheet('fireb2', 'images/fireb.png', 16, 16);\n  game.load.image('kladka-short', 'images/kladka-short.png'); // audio\n\n  game.load.audio('footstep', 'audio/footstep.mp3'); // licence no ok\n\n  game.load.audio('coin', 'audio/coin.mp3'); // licence ok\n\n  game.load.audio('shoot', 'audio/shoot2.mp3'); // licence ok\n\n  game.load.audio('bullets', 'audio/bullets3.mp3');\n  game.load.audio('explosion-intruder', 'audio/explosion-intruder.mp3');\n  game.load.audio('break-bones', 'audio/break-bones.mp3');\n  game.load.audio('scream', 'audio/scream.mp3'); // licence ok\n\n  game.load.audio('scream2', 'audio/scream2.mp3'); // licence ok\n\n  game.load.audio('splash', 'audio/splash.mp3'); // licence ok\n\n  game.load.audio('life', 'audio/life.mp3'); // licence ok\n\n  game.load.audio('condor', 'audio/condor.mp3'); // licence ok\n\n  game.load.audio('key', 'audio/key.mp3'); // licence no ok\n\n  game.load.audio('break-ground', 'audio/break.mp3'); // licence ok\n\n  game.load.audio('quake', 'audio/quake.mp3'); // licence ok\n\n  game.load.audio('door-lift', 'audio/door-lift.mp3'); // licence ok\n\n  game.load.audio('bg1', 'audio/bg.mp3'); // licence ok\n\n  game.load.audio('flash', 'audio/flash.mp3'); // licence ok\n\n  game.load.audio('next-level', 'audio/next-level.mp3'); // licence ok\n\n  game.load.audio('tic-score', 'audio/tic.mp3'); // licence ok\n  //this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n  //this.scale.pageAlignHorizontally = true;\n  //this.scale.pageAlignVertically = true;\n  //this.scale.updateLayout;\n\n  game.scale.maxWidth = 800;\n  game.scale.maxHeight = 450;\n  game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n  game.scale.windowConstraints.bottom = \"visual\"; //this.scale.setScreenSize();\n}; // game options\n\n\nvar toolsGame = {\n  resetGameCookies: function resetGameCookies(type) {\n    if (type === \"all\") {\n      Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])(\"unlock-levels\");\n      unlockLevels = 1;\n      Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('coins-procent-last-memory');\n      Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('id-level-last-memory');\n\n      for (var i = 1; i <= amountLevels; i++) {\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('coins-' + i);\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('coins-procent-' + i);\n      }\n    }\n\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('bullets');\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('coins');\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('Lifes');\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('main-Lifes');\n  },\n  bgSet: function bgSet(bgColor) {\n    game.stage.backgroundColor = bgColor;\n  },\n  // slider: {\n  //     bounds: false,\n  //     min: false,\n  //     slider: false,\n  //     show: function() { // toolsGame.slider.show();\n  //         //define the boundary of the handler\n  //         this.bounds= new Phaser.Rectangle(100,100,500,80);\n  //         var graphics = game.add.graphics(this.bounds.x, this.bounds.y);\n  //         graphics.beginFill(0x000077);\n  //         graphics.drawRect(0, 0, this.bounds.width, this.bounds.height);\n  //         graphics.fixedToCamera = true;\n  //\n  //\n  //         //add empty sprite for input detection\n  //         this.slider = game.add.sprite(100, 100,'bullet');\n  //         this.slider.fixedToCamera = true;\n  //         this.slider.scale.setTo(1);\n  //         this.slider.inputEnabled = true;\n  //         this.slider.input.enableDrag(false,false,false,255,this.bounds);\n  //         this.slider.input.allowVerticalDrag = false;\n  //         this.slider.events.onDragStop.add(function(){\n  //             var that = toolsGame.slider;\n  //             if(that.slider.x>(that.bounds.width/2)+that.bounds.x){\n  //                 that.min=((that.bounds.width+that.bounds.x-that.slider.x-that.slider.width)/(that.bounds.width+that.bounds.x-that.slider.width))*100;\n  //             }\n  //             if(that.slider.x<(that.bounds.width/2)+that.bounds.x){\n  //                 that.min=((that.bounds.width+that.bounds.x-that.slider.x)/(that.bounds.width))*100;\n  //             }\n  //             console.log(that.min);\n  //         }, game);\n  //         this.min=1;\n  //     },\n  //     hide: function () {\n  //\n  //     }\n  // },\n  audio: {\n    footStep: function footStep(volume) {\n      // toolsGame.audio.footStep();\n      if (!this.a1) {\n        var footstep = game.add.audio('footstep');\n        footstep.play('', false, volume ? volume : 0.2); //footstep.volume = 0.05;\n\n        this.a1 = true;\n        footstep.onStop.addOnce(function () {\n          this.a1 = false;\n        }, this);\n      }\n    },\n    coin: function coin(volume) {\n      // toolsGame.audio.footStep();\n      var coin = game.add.audio('coin');\n      coin.play('', false, volume ? volume : 0.2);\n    },\n    ticScore: function ticScore(volume) {\n      // toolsGame.audio.footStep();\n      var ticScore = game.add.audio('tic-score');\n      ticScore.play('', false, volume ? volume : 0.2);\n    },\n    shoot: function shoot(volume) {\n      // toolsGame.audio.footStep();\n      var shoot = game.add.audio('shoot');\n      shoot.play('', false, volume ? volume : 0.2);\n    },\n    bullets: function bullets(volume) {\n      // toolsGame.audio.footStep();\n      var bullets = game.add.audio('bullets');\n      bullets.play('', false, volume ? volume : 0.2);\n    },\n    explosionIntruder: function explosionIntruder() {\n      // toolsGame.audio.footStep();\n      var explosionIntruder = game.add.audio('explosion-intruder');\n      explosionIntruder.play('', false, 0.5);\n    },\n    breakBones: function breakBones(volume) {\n      // toolsGame.audio.footStep();\n      var breakBones = game.add.audio('break-bones');\n      breakBones.play('', false, volume ? volume : 0.2);\n    },\n    scream: function scream(volume) {\n      // toolsGame.audio.footStep();\n      var scream = game.add.audio('scream');\n      scream.play('', false, volume ? volume : 0.2);\n    },\n    screamIntruder: function screamIntruder(volume) {\n      // toolsGame.audio.footStep();\n      var screamIntruder = game.add.audio('scream2');\n      screamIntruder.play('', false, volume ? volume : 0.2);\n    },\n    flash: function flash(volume) {\n      // toolsGame.audio.footStep();\n      var flash = game.add.audio('flash');\n      flash.play('', false, volume ? volume : 0.2);\n    },\n    splash: function splash(volume) {\n      // toolsGame.audio.footStep();\n      // var splash = game.add.audio('splash');\n      // splash.play('',false,volume?volume:0.2);\n      if (!this.aSplash) {\n        var splash = game.add.audio('splash');\n        splash.play('', false, 0.1); //footstep.volume = 0.05;\n\n        this.aSplash = true;\n        game.time.events.add(500, function () {\n          this.aSplash = false;\n        }, this); // setTimeout(function(that){\n        //     that.aSplash=false;\n        // },500,this);\n        // splash.onStop.addOnce(function() {\n        //     this.aSplash=false;\n        // }, this);\n      }\n    },\n    life: function life(volume) {\n      // toolsGame.audio.footStep();\n      var life = game.add.audio('life');\n      life.play('', false, volume ? volume : 0.2);\n    },\n    key: function key(volume) {\n      // toolsGame.audio.footStep();\n      var key = game.add.audio('key');\n      key.play('', false, volume ? volume : 0.2);\n    },\n    condor: function condor(volume) {\n      // toolsGame.audio.footStep();\n      if (!this.aCcondor) {\n        var condor = game.add.audio('condor');\n        condor.play('', false, volume ? volume : 0.2); //footstep.volume = 0.05;\n\n        this.aCcondor = true;\n        condor.onStop.addOnce(function () {\n          this.aCcondor = false;\n        }, this);\n      }\n    },\n    breakGround: function breakGround(volume) {\n      // toolsGame.audio.footStep();\n      var breakGround = game.add.audio('break-ground');\n      breakGround.play('', false, volume ? volume : 0.2);\n    },\n    quake: function quake(volume) {\n      // toolsGame.audio.footStep();\n      var quake = game.add.audio('quake');\n      quake.play('', false, volume ? volume : 0.2);\n    },\n    doorLift: function doorLift(volume) {\n      // toolsGame.audio.footStep();\n      var doorLift = game.add.audio('door-lift');\n      doorLift.play('', false, volume ? volume : 0.2);\n    },\n    bg: {\n      //obj: false,\n      play: function play(volume, bg) {\n        if (bg) {\n          if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n          this.obj = game.add.audio(bg);\n          this.obj.play('', false, volume ? volume : 0.2, true);\n        }\n      },\n      stop: function stop() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.stop();\n      }\n    },\n    nextLevel: function nextLevel(volume) {\n      // toolsGame.audio.footStep();\n      if (!this.nL) {\n        var nextLevel = game.add.audio('next-level');\n        nextLevel.play('', false, volume ? volume : 0.2);\n        this.nL = true;\n        nextLevel.onStop.addOnce(function () {\n          this.nL = false;\n        }, this);\n      }\n    }\n  },\n  preloader: {\n    //obj: true,\n    add: function add(x, y, lastMap, percentLevel) {\n      //alert(theEndCredits);\n      toolsGame.bgSet('#000000');\n      toolsGame.preloader.obj = game.add.group();\n      toolsGame.preloader.obj.enableBody = true; // if(!theEndCredits) {\n      //     var w =  this.obj.create(x*tileSize, y*tileSize, 'windmill_1_new'), theEnd=false;\n      //     w.anchor.setTo(0.5, 0.5);\n      //     w.body.allowGravity = false;\n      //     w.fixedToCamera = true;\n      //\n      //     this.interval = setInterval(function () {\n      //         w.angle += 1;\n      //         //console.log(\"preloader works\");\n      //     },10);\n      // }\n      //var score = percentLevel?(percentLevel+'%' + \"\\n\"):'';\n\n      var LoadingCongratylation1 = theEndCredits ? lastMap ? 'Congratulations!...' : '' : \"Level \" + levelFile.activeIdLevel,\n          LoadingCongratylation2 = theEndCredits ? lastMap ? \"The End\" : '' : 'Loading...';\n      toolsGame.text.show('center', 0, -tileSize, 0.9, LoadingCongratylation1, 'bold 52px Arial', '#ffffff', true, 'loading1');\n      toolsGame.text.show('center', 0, 0.7 * tileSize, 0.9, LoadingCongratylation2, 'bold 28px Arial', '#ffffff', true, 'loading2');\n      toolsGame.text.show('center', 0, 5 * tileSize, 0.9, \"Copyright \\xA9 Gold Rush, once upon a time in the Wild West...\", '16px Arial', '#ffffff', true, 'loadingCopyright1');\n      toolsGame.text.show('center', 0, 5.75 * tileSize, 0.9, 'semDesign', '14px Arial', '#ffffff', true, 'loadingCopyright2');\n    },\n    hide: function hide() {\n      if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) {\n        this.obj.destroy();\n      }\n\n      toolsGame.text.hide('loading1');\n      toolsGame.text.hide('loading2');\n      toolsGame.text.hide('loadingCopyright1');\n      toolsGame.text.hide('loadingCopyright2'); //clearInterval(this.interval);\n    }\n  },\n  windows: {\n    boxTopMenu: {\n      positionBar: function positionBar(type) {\n        if (toolsGame.windows.boxMenu.obj || type === 'inside-boxMenu') {\n          moveY = 6 * tileSize + 8;\n          moveX = 7 * tileSize;\n        } else {\n          moveX = -1 * tileSize;\n          moveY = -1 * tileSize + 2;\n        }\n      },\n      \"const\": {\n        show: function show(type) {\n          // toolsGame.windows.boxTopMenu.const.show()\n\n          /**/\n          toolsGame.windows.boxTopMenu.positionBar(type);\n\n          if (!theEndCredits) {\n            toolsGame.windows.boxTopMenu.positionBar();\n            toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 18 * tileSize + moveX : 33 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 'Life', 'Life1', 1, 1, .8, .8, 8); //\n            // toolsGame.image.show(\n            //     (toolsGame.windows.boxMenu.obj)?18*tileSize+moveX:33*tileSize+moveX,\n            //     (toolsGame.windows.boxMenu.obj)?1.5*tileSize+moveY:1.75*tileSize+moveY,\n            //     'lifes-single-bar','lifes-single-bar',1,1,.8,.8,1\n            // );\n\n            toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 22 * tileSize + moveX : 37 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 'coin', 'coin', 1, 1, .8, .8, 3);\n            toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 28.4 * tileSize + moveX : 43.4 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY - 4 : 1.5 * tileSize + moveY - 4, 'bullets_gun', 'bullets_gun', 1, 1, .75, .75, 0);\n            toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 32.5 * tileSize + moveX : 47.5 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY - 2 : 1.5 * tileSize + moveY - 2, 'key', 'key', 1, 1, .7, .5, 5);\n          }\n          /**/\n\n        },\n        //  toolsGame.windows.boxTopMenu.const.hide();\n        hide: function hide() {\n          if (!theEndCredits) {\n            var hideArray = ['Life1', 'Life2', 'coin', 'bullets_gun', 'key'];\n\n            for (var i = 0, iLnegth = hideArray.length; i < iLnegth; i++) {\n              toolsGame.image.hide(hideArray[i]);\n            }\n          }\n        }\n      },\n      letAlways: {\n        show: function show() {\n          toolsGame.windows.boxTopMenu.positionBar();\n\n          if (proportiesMap[levelFile.activeIdLevel].timeLimit && !levelFile.blockedKeys) {\n            if (timerTotal === proportiesMap[levelFile.activeIdLevel].timeLimit) {\n              toolsGame.windows.boxMenu.show('time-over'); //toolsGame.windows.boxMenu.show();\n            }\n\n            timerLimit = proportiesMap[levelFile.activeIdLevel].timeLimit - timerTotal;\n          }\n\n          toolsGame.text.show(false, toolsGame.windows.boxMenu.obj ? 4 * tileSize + moveX : 4 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 1, 'Level ' + levelFile.activeIdLevel + ' / ' + (proportiesMap[levelFile.activeIdLevel].timeLimit ? 'Limit: ' + timerLimit : timerTotal) + 's', '700 15px Arial', '#ded4b8', true, 'level_text', true);\n        }\n      },\n      \"let\": {\n        show: function show() {\n          //  toolsGame.windows.boxTopMenu.let.show();\n          toolsGame.windows.boxTopMenu.positionBar(); // toolsGame.text.show(false,\n          //     (toolsGame.windows.boxMenu.obj)?19*tileSize+moveX:34*tileSize+moveX,\n          //     (toolsGame.windows.boxMenu.obj)?1.5*tileSize+moveY:1.5*tileSize+moveY,\n          //     1,('x ' + toolsGame.mainElements.player.numberLifes),'700 15px Arial' ,'#ded4b8',true,'number_Lifes_text',true\n          // );\n\n          toolsGame.text.show(false, toolsGame.windows.boxMenu.obj ? 19 * tileSize + moveX : 34 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 1, 'x ' + toolsGame.mainElements.player.numberMainLifes, '700 15px Arial', '#ded4b8', true, 'number_main_Lifes_text', true);\n          toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 14.7 * tileSize + moveX : 29.7 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.75 * tileSize + moveY : 1.75 * tileSize + moveY, 'lifes-single-bar', 'lifes-single-bar', 1, 1, .8, .8, 3 - toolsGame.mainElements.player.numberLifes);\n          toolsGame.text.show(false, toolsGame.windows.boxMenu.obj ? 23 * tileSize + moveX : 38 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 1, 'x ' + toolsGame.mainElements.player.numberCoins + ' (' + toolsGame.mainElements.player.numberCoinsLevelProcent + '%)', '700 15px Arial', '#ded4b8', true, 'coinstext', true);\n          toolsGame.text.show(false, toolsGame.windows.boxMenu.obj ? 29.5 * tileSize + moveX : 44.5 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 1, 'x ' + toolsGame.mainElements.player.countBullets, '700 15px Arial', '#ded4b8', true, 'bullets_gun_text', true);\n          toolsGame.text.show(false, toolsGame.windows.boxMenu.obj ? 33.5 * tileSize + moveX : 48.5 * tileSize + moveX, toolsGame.windows.boxMenu.obj ? 1.5 * tileSize + moveY : 1.5 * tileSize + moveY, 1, 'x ' + keys, '700 15px Arial', '#ded4b8', true, 'key_text', true);\n        }\n      }\n    },\n    boxMenu: {\n      obj: false,\n      bg: function bg(type) {\n        if (this.obj) this.obj.destroy();\n        this.obj = game.add.image(tileSize * 2, tileSize * 2, 'boxMenu');\n        this.obj.alpha = 0;\n        this.obj.fixedToCamera = true;\n\n        if (!type) {\n          game.add.tween(this.obj).to({\n            alpha: 0.8\n          }, 180, Phaser.Easing.Linear.None, true);\n        } else {\n          this.obj.alpha = 0.8;\n        } // game.physics.arcade.enable(this.obj);\n        // console.log(this.obj);\n        // game.add.tween(this.obj).to( { x: 200 }, 300, Phaser.Easing.Exponential.Out, true);\n        // console.log(\"x\");\n\n      },\n      show: function show(type) {\n        //console.log(toolsGame.windows.boxMenu.obj);\n        //console.log(this.obj);\n        toolsGame.buttons.openBoxMenu.hide(); //boxMenu.\n        // if(this.obj) this.obj.destroy();\n        // this.obj=game.add.image(tileSize*2, tileSize*2, 'boxMenu');\n        // this.obj.alpha = 0.8;\n        // this.obj.fixedToCamera = true;\n\n        this.bg(type); // toolsGame.windows.boxMenu.bg();\n\n        toolsGame.buttons.end.show();\n        toolsGame.buttons.startFromBeginning.show(); //toolsGame.buttons.reset.show();\n\n        toolsGame.buttons.mute.show(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('mute') ? 10 : 9);\n\n        if (playGame.main) {\n          toolsGame.buttons.navigations.hide();\n          toolsGame.image.hide('boxTopMenu', true);\n          toolsGame.windows.boxTopMenu[\"const\"].hide();\n          toolsGame.windows.boxTopMenu[\"const\"].show('inside-boxMenu'); // setTimeout(function(){\n          //     game.paused = true;\n          // },210);\n\n          game.time.events.add(300, function () {\n            game.paused = true;\n          }, this);\n        } else {\n          toolsGame.buttons.reset.show();\n          toolsGame.buttons.levels.hide();\n          toolsGame.buttons.play.hide();\n          toolsGame.buttons.quit.hide();\n          toolsGame.buttons.mute.hide();\n        } //toolsGame.buttons.closeBoxMenu.show();\n\n\n        if (type === 'game-complete') {\n          toolsGame.text.show('center', 0, 0, 0.6, \"Thank you for playing\", 'bold 46px Arial', '#ffffff', true, 'game-complite');\n        } else if (type === 'game-over') {\n          toolsGame.text.show('center', 0, 0, 0.6, \"Game Over!\", 'bold 46px Arial', '#ffffff', true, 'game-complite');\n        } else if (type === 'time-over') {\n          toolsGame.text.show('center', 0, 0, 0.6, \"Time Over!\", 'bold 46px Arial', '#ffffff', true, 'game-complite');\n        } else {\n          toolsGame.buttons.closeBoxMenu.show();\n          toolsGame.buttons.resume.show();\n        }\n\n        toolsGame.windows.boxTopMenu.f = false;\n      },\n      hide: function hide() {\n        //if(game.paused)\n        //{\n        var hide = game.add.tween(this.obj).to({\n          alpha: 0\n        }, 200, Phaser.Easing.Linear.None, true);\n        hide.onComplete.add(function (o) {\n          o.destroy();\n        }, this); //this.obj.destroy();\n\n        this.obj = false;\n        toolsGame.buttons.end.hide();\n        toolsGame.buttons.startFromBeginning.hide();\n        toolsGame.buttons.reset.hide();\n        toolsGame.buttons.resume.hide();\n        toolsGame.buttons.mute.hide();\n        toolsGame.buttons.closeBoxMenu.hide(); //game.input.onDown.removeAll();\n\n        game.paused = false;\n\n        if (playGame.main) {\n          if (!theEndCredits) {\n            toolsGame.buttons.navigations.show();\n            toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 0 : 0, toolsGame.windows.boxMenu.obj ? 0 : 0, 'boxTopMenu', 'boxTopMenu', .85, 1, false, false, false, true);\n            toolsGame.windows.boxTopMenu[\"const\"].show();\n          }\n\n          toolsGame.buttons.openBoxMenu.show('play-game');\n        } else {\n          toolsGame.buttons.openBoxMenu.show();\n          toolsGame.buttons.levels.show();\n          toolsGame.buttons.play.show();\n          toolsGame.buttons.quit.show();\n          toolsGame.buttons.mute.show(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('mute') ? 10 : 9);\n        }\n\n        toolsGame.windows.boxTopMenu.f = false; //}\n      }\n    }\n  },\n  buttons: {\n    openBoxMenu: {\n      //obj:false,\n      show: function show(type) {\n        //x\n        //buttonPauseMenu\n        //console.log(toolsGame.buttons.openBoxMenu);\n        //console.log(this);\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n\n        if (type === 'play-game') {\n          this.obj = game.add.button(0, 0, 'buttonPause', function () {\n            toolsGame.windows.boxMenu.show();\n          }, this, 0, 0);\n        } else {\n          this.obj = game.add.button(tileSize, tileSize, 'buttonsWindowMenu', function () {\n            toolsGame.windows.boxMenu.show();\n          }, this, 2, 2);\n        }\n\n        if (type === 'play-game') {\n          this.obj.alpha = .8;\n        } else {\n          this.obj.alpha = 0.6;\n        }\n\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) {\n          this.obj.destroy();\n        } //toolsGame.buttons.openBoxMenu.obj.visible = false;\n\n      }\n    },\n    //buttonsIcons\n    closeBoxMenu: {\n      //obj:false,\n      show: function show() {\n        //buttonPauseMenu\n        //console.log(toolsGame.buttons.openBoxMenu);\n        //console.log(this);\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(44 * tileSize, 3 * tileSize, 'buttonsIcons', function () {\n          toolsGame.windows.boxMenu.hide();\n        }, this, 3, 2);\n        this.obj.alpha = 0.4;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) {\n          this.obj.destroy();\n        } //toolsGame.buttons.closeBoxMenu.obj.visible = false;\n\n      }\n    },\n    play: {\n      //toolsGame.buttons.play.show()\n      //obj:false,\n      show: function show() {\n        //buttonPlay\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(9 * tileSize, tileSize, 'buttonsWindowMenu', function () {\n          startGame('continuation');\n        }, this);\n        this.obj.alpha = 0.6;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) {\n          //this.obj.y=2*tileSize;\n          //console.log(this.obj.position.y);\n          // var hidePlay = game.add.tween(this.obj).to({alpha: 0}, 300, Phaser.Easing.Linear.None, true);\n          // hidePlay.onComplete.add(function(o){\n          //     o.destroy();\n          // }, this);\n          this.obj.destroy();\n        } //toolsGame.buttons.play.obj.visible = false;\n\n      }\n    },\n    quit: {\n      //toolsGame.buttons.quit.show()\n      //obj:false,\n      show: function show() {\n        //buttonQuit\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(17 * tileSize, 1 * tileSize, 'buttonsWindowMenu', function () {\n          //alert(\"Quit game!\");\n          //toolsGame.windows.boxMenu.show('quite');\n          toolsGame.windows.boxMenu.bg();\n          toolsGame.text.show('center', 0, -10, 0.9, 'Are you sure you want to quit the game?', 'bold 26px Arial', '#ffffff', true, 'quit-1');\n          toolsGame.buttons.yes.show(16, 16, 'quit');\n          toolsGame.buttons.no.show(27, 16, 'quit');\n          toolsGame.buttons.openBoxMenu.hide();\n          toolsGame.buttons.levels.hide();\n          toolsGame.buttons.play.hide();\n          toolsGame.buttons.quit.hide();\n          toolsGame.buttons.mute.hide();\n        }, this, 6, 6);\n        this.obj.alpha = 0.6;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy(); //toolsGame.buttons.play.obj.visible = false;\n      }\n    },\n    end: {\n      //obj:false,\n      show: function show() {\n        //buttonEnd\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(3 * tileSize, 3 * tileSize, 'buttonsWindowMenu', function () {\n          //game.paused = false;\n          //closeMenu();\n          game.time.events.removeAll();\n          toolsGame.windows.boxMenu.hide();\n          correctCookiesProcent();\n          endGame();\n          levelFile.name = 'level1';\n          levelFile.activeIdLevel = 1;\n        }, this, 1, 1);\n        this.obj.alpha = 0.4;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy(); //toolsGame.buttons.end.obj.visible = false;\n      }\n    },\n    startFromBeginning: {\n      //obj:false,\n      show: function show() {\n        //buttonStartFromBeginning\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(11 * tileSize, 3 * tileSize, 'buttonsWindowMenu', function () {\n          game.time.events.removeAll();\n          toolsGame.windows.boxMenu.hide();\n          toolsGame.mainElements.player.numberMainLifes = amountMainLife;\n          toolsGame.mainElements.player.numberLifes = amountLife;\n          toolsGame.mainElements.player.countBullets = amountBullet;\n          toolsGame.mainElements.player.numberCoins = 0;\n          endGame(); //alert(levelFile.activeIdLevel + \" - \" + unlockLevels + \" - \" + amountLevels);\n\n          if (levelFile.activeIdLevel < amountLevels) {\n            levelFile.name = 'level' + levelFile.activeIdLevel;\n            levelFile.activeIdLevel = levelFile.activeIdLevel;\n          } else {\n            levelFile.name = 'level1';\n            levelFile.activeIdLevel = 1;\n          } //toolsGame.resetGameCookies(\"all\");\n\n\n          startGame();\n        }, this, 3, 3);\n        this.obj.alpha = 0.4;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n      }\n    },\n    reset: {\n      //obj:false,\n      show: function show() {\n        //buttonResetFromBeginning\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(19 * tileSize, 3 * tileSize, 'buttonsWindowMenu', function () {\n          toolsGame.windows.boxMenu.hide();\n          levelFile.name = 'level1';\n          levelFile.activeIdLevel = 1;\n          toolsGame.resetGameCookies(\"all\");\n          endGame();\n          toolsGame.buttons.levels.hide();\n          toolsGame.buttons.levels.show();\n        }, this, 4, 4);\n        this.obj.alpha = 0.4;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n      }\n    },\n    resume: {\n      //obj:false,\n      show: function show() {\n        //buttonResume\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(20 * tileSize, 14 * tileSize, 'buttonsWindowMenu', function () {\n          toolsGame.windows.boxMenu.hide();\n\n          if (!playGame.main) {\n            startGame('continuation');\n          }\n        }, this, !playGame.main ? 0 : 5, !playGame.main ? 0 : 5);\n        this.obj.scale.x = 1.4;\n        this.obj.scale.y = 1.4;\n        this.obj.alpha = 0.6;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n      }\n    },\n    mute: {\n      //obj:false,\n      show: function show(frames) {\n        //buttonResume\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        var x = playGame.main ? 3 * tileSize : tileSize,\n            y = playGame.main ? 7 * tileSize : 5 * tileSize;\n        this.obj = game.add.button(x, y, 'buttonsWindowMenu', function () {\n          if (game.paused) {\n            game.paused = false;\n            game.time.events.remove(this.t);\n            this.t = game.time.events.add(25, function () {\n              game.paused = true;\n            }, this); // clearTimeout(this.t);\n            // this.t = setTimeout(function(){\n            //     game.paused = true;\n            // },25);\n          }\n\n          this.obj.destroy();\n\n          if (Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('mute')) {\n            toolsGame.buttons.mute.show(9);\n            game.sound.mute = false;\n            Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"removeCookies\"])('mute');\n          } else {\n            toolsGame.buttons.mute.show(10);\n            game.sound.mute = true;\n            Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('mute', 1);\n          }\n        }, this, frames, frames);\n        this.obj.alpha = playGame.main ? 0.4 : 0.6;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n      }\n    },\n    yes: {\n      // toolsGame.buttons.yes.show(x,y,'quit');\n      //obj:false,\n      show: function show(x, y, type) {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(x * tileSize, y * tileSize, 'buttonsWindowMenu', function () {\n          if (type === 'quit') {\n            if (_varibles__WEBPACK_IMPORTED_MODULE_1__[\"detectionDevice\"]) {\n              navigator.app.exitApp();\n            } else {\n              //alert('This option doesn\\'t work in the browser');\n              location.reload();\n            }\n          }\n        }, this, 7, 7);\n        this.obj.alpha = 0.4;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n      }\n    },\n    no: {\n      // toolsGame.buttons.no.show(x,y,'quit');\n      //obj:false,\n      show: function show(x, y, type) {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n        this.obj = game.add.button(x * tileSize, y * tileSize, 'buttonsWindowMenu', function () {\n          if (type === 'quit') {\n            toolsGame.buttons.no.hide();\n            toolsGame.buttons.yes.hide(); //toolsGame.windows.boxMenu.obj.destroy();\n\n            if (this.obj) {\n              var hide = game.add.tween(toolsGame.windows.boxMenu.obj).to({\n                alpha: 0\n              }, 200, Phaser.Easing.Linear.None, true);\n              hide.onComplete.add(function (o) {\n                o.destroy();\n              }, this);\n            }\n\n            toolsGame.windows.boxMenu.obj = false;\n            toolsGame.text.hide('quit-1');\n            toolsGame.buttons.openBoxMenu.show();\n            toolsGame.buttons.levels.show();\n            toolsGame.buttons.play.show();\n            toolsGame.buttons.quit.show();\n            toolsGame.buttons.mute.show(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('mute') ? 10 : 9);\n          }\n        }, this, 8, 8);\n        this.obj.alpha = 0.4;\n        this.obj.fixedToCamera = true;\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.obj)) this.obj.destroy();\n      }\n    },\n    navigations: {\n      //left:false,\n      //right:false,\n      //up:false,\n      //shot:false,\n      show: function show() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.left)) this.left.destroy();\n        this.left = game.add.button(0, game.height - 7 * tileSize, 'buttonNavigation', function () {}, this, 0, 0); //#\n\n        this.left.alpha = 0.1;\n        this.left.fixedToCamera = true;\n        this.left.onInputDown.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 37, \"keydown\");\n        });\n        this.left.onInputUp.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 37, \"keyup\");\n        });\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.right)) this.right.destroy();\n        this.right = game.add.button(6 * tileSize, game.height - 7 * tileSize, 'buttonNavigation', function () {}, this, 1, 1); //#\n\n        this.right.alpha = 0.1;\n        this.right.fixedToCamera = true;\n        this.right.onInputDown.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 39, \"keydown\");\n        });\n        this.right.onInputUp.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 39, \"keyup\");\n        }); /////\n\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.shot)) this.shot.destroy();\n        this.shot = game.add.button(game.width - 7 * tileSize, game.height - 13 * tileSize, 'buttonNavigation', function () {}, this, 3, 3); //#\n\n        this.shot.alpha = toolsGame.mainElements.player.countBullets ? 0.1 : 0; // toolsGame.buttons.navigations.show.shot.alpha\n\n        this.shot.inputEnabled = toolsGame.mainElements.player.countBullets ? true : false;\n        this.shot.fixedToCamera = true;\n        this.shot.onInputDown.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 17, \"keydown\");\n        });\n        this.shot.onInputUp.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 17, \"keyup\");\n        });\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.up)) this.up.destroy();\n        this.up = game.add.button(game.width - 7 * tileSize, game.height - 7 * tileSize, 'buttonNavigation', function () {}, this, 2, 2); //#\n\n        this.up.alpha = 0.1;\n        this.up.fixedToCamera = true;\n        this.up.onInputDown.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 38, \"keydown\");\n        });\n        this.up.onInputUp.add(function () {\n          Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"triggerKeyboardEvent\"])(window, 38, \"keyup\");\n        });\n      },\n      hide: function hide() {\n        if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.left) && Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.right) && Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.up) && Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isExists\"])(this.shot)) {\n          this.left.destroy();\n          this.right.destroy();\n          this.up.destroy();\n          this.shot.destroy();\n        }\n      }\n    },\n    levels: {\n      obj: [],\n      text: [],\n      text2: [],\n      show: function show() {\n        //toolsGame.buttons.levels\n        var item = 0,\n            itemMoveX = 0,\n            itemMoveY = 0,\n            theEnd = false; //alert(levelFile.activeIdLevel + \" =? \" + unlockLevels + \" =? \" + getCookies(\"unlock-levels\"));\n        //console.log(Object.keys(game.cache._cacheMap[7]).length);\n\n        for (var key in game.cache._cacheMap[7]) {\n          if (game.cache._cacheMap[7].hasOwnProperty(key)) {\n            item++; //console.log(key + \" - \" + item);\n\n            this.obj.push(item);\n            this.text.push(item);\n            this.text2.push(item);\n\n            if (item > 9) {\n              itemMoveX = 45 * tileSize;\n              itemMoveY = 5 * tileSize;\n            }\n\n            theEnd = false;\n\n            if (item === Object.keys(game.cache._cacheMap[7]).length) {\n              theEnd = '?';\n            }\n\n            if (item <= unlockLevels || theEnd) {\n              this.obj[item] = game.add.button(5 * tileSize * (item - 1) + 3 * tileSize - itemMoveX, 17 * tileSize + itemMoveY, 'buttonLevel', function () {\n                //console.log(this);\n                levelFile.name = 'level' + this;\n                levelFile.activeIdLevel = this; //alert(toolsGame.mainElements.player.numberLifes);\n\n                toolsGame.resetGameCookies();\n                startGame();\n              }, item, 0);\n              this.text2[item] = game.add.text(0, 0, theEnd ? 'Credits' : \"(\" + (Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-' + item) ? Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-' + item) : 0) + \"%)\", {\n                font: \"12px Arial\",\n                fill: \"#ffffff\",\n                boundsAlignH: \"center\",\n                boundsAlignV: \"middle\"\n              });\n              this.text2[item].setTextBounds(0, 0, 4 * tileSize, 7 * tileSize);\n              this.obj[item].addChild(this.text2[item]);\n            } else {\n              this.obj[item] = game.add.button(5 * tileSize * (item - 1) + 3 * tileSize - itemMoveX, 17 * tileSize + itemMoveY, 'buttonLevel', function () {// nothing to do\n              }, item, 1, 1);\n            }\n\n            this.text[item] = game.add.text(0, 0, theEnd ? theEnd : item, {\n              font: \"24px Arial\",\n              fill: \"#ffffff\",\n              boundsAlignH: \"center\",\n              boundsAlignV: \"middle\"\n            });\n            this.text[item].setTextBounds(0, 0, 4 * tileSize, 4.5 * tileSize);\n            this.obj[item].alpha = 0.8;\n            this.obj[item].addChild(this.text[item]);\n            this.obj[item].fixedToCamera = true;\n          }\n        }\n\n        amountLevels = item; //console.log(\"levels: \" + amountLevels);\n        //alert(this.start.length);\n      },\n      hide: function hide() {\n        //alert(toolsGame.buttons.levels.obj.length);\n        for (var i = 1, iLength = this.obj.length; i < iLength; i++) {\n          //console.log(this.obj[i]);\n          this.obj[i].destroy();\n        }\n\n        this.obj = [];\n        this.text = [];\n        this.text2 = [];\n      }\n    }\n  },\n  text: {\n    obj: [],\n    show: function show(typeText, x, y, opacitySpec, textSpec, fontSpec, colorSpec, cameraFixed, idName, textShadow) {\n      if (this.obj[idName]) this.obj[idName].destroy();\n      this.obj.push(idName);\n\n      if (typeText === 'center') {\n        this.obj[idName] = game.add.text(x, y, textSpec, {\n          font: fontSpec,\n          fill: colorSpec,\n          boundsAlignH: \"center\",\n          boundsAlignV: \"middle\"\n        });\n        this.obj[idName].setTextBounds(x, y, game.width, game.height);\n      } else {\n        this.obj[idName] = game.add.text(x, y, textSpec, {\n          font: fontSpec,\n          fill: colorSpec\n        });\n      }\n\n      this.obj[idName].alpha = opacitySpec;\n      this.obj[idName].fixedToCamera = cameraFixed;\n\n      if (textShadow) {\n        this.obj[idName].setShadow(1, -1, 'rgba(0,0,0,1)', 0);\n      }\n\n      if (typeText === 'add-point') {\n        //game.physics.arcade.enable([ this.obj[idName] ]);\n        //console.log(this.obj[idName]);\n        //this.obj[idName].enableBody = true;\n        //this.obj[idName].body.allowGravity = false;\n        //this.obj[idName].body.velocity.y=-50;\n        game.add.tween(this.obj[idName]).to({\n          y: y - 48\n        }, 900, Phaser.Easing.Linear.None, true);\n        game.time.events.add(600, function () {\n          var tween = game.add.tween(this.obj[idName]).to({\n            alpha: 0\n          }, 300, Phaser.Easing.Linear.None, true);\n          tween.onComplete.add(function (o) {\n            o.destroy();\n          }, this);\n        }, this);\n      }\n    },\n    hide: function hide(idName) {\n      if (this.obj[idName]) this.obj[idName].destroy();\n    }\n  },\n  image: {\n    obj: [],\n    show: function show(x, y, nameSpriteOrImage, idName, opacitySpec, cameraFixed, scaleW, scaleH, frame, fade) {\n      if (this.obj[idName]) this.obj[idName].destroy();\n      this.obj.push(idName);\n      this.obj[idName] = game.add.image(x, y, nameSpriteOrImage);\n      if (opacitySpec) this.obj[idName].alpha = opacitySpec;\n      if (cameraFixed) this.obj[idName].fixedToCamera = cameraFixed;\n      if (scaleW && scaleH) this.obj[idName].scale.setTo(scaleW, scaleH);\n      if (frame) this.obj[idName].frame = frame;\n\n      if (fade) {\n        this.obj[idName].alpha = 0;\n        game.add.tween(this.obj[idName]).to({\n          alpha: opacitySpec ? opacitySpec : 1\n        }, 200, Phaser.Easing.Linear.None, true);\n      }\n    },\n    hide: function hide(idName, fade) {\n      if (this.obj[idName]) {\n        if (fade) {\n          var hide = game.add.tween(this.obj[idName]).to({\n            alpha: 0\n          }, 200, Phaser.Easing.Linear.None, true);\n          hide.onComplete.add(function (o) {\n            o.destroy();\n          }, this);\n        } else {\n          this.obj[idName].destroy();\n        }\n      }\n    }\n  },\n  createCenterObject: function createCenterObject(thatObj, x, y, name, type) {\n    var width = game.cache.getImage(name).width,\n        height = game.cache.getImage(name).height;\n\n    if (type === \"sprite\") {\n      width = game.cache._cache.image[name].frameWidth;\n      height = game.cache._cache.image[name].frameHeight;\n    }\n\n    return thatObj.create(x * tileSize + 2 * tileSize - (width / 2 + tileSize + tileSize / 2), y * tileSize - (height - 2 * tileSize), name);\n  },\n  createLeftObject: function createLeftObject(thatObj, x, y, name, type) {\n    var height = game.cache.getImage(name).height;\n\n    if (type == \"sprite\") {\n      height = game.cache._cache.image[name].frameHeight;\n    }\n\n    return thatObj.create(x * tileSize, y * tileSize - (height - 2 * tileSize), name);\n  },\n  checkSpecialBlankBlockElement: function checkSpecialBlankBlockElement(lay) {\n    if (lay.index === 51) {\n      lay.collideDown = true;\n      lay.collideUp = true;\n      lay.collideLeft = true;\n      lay.collideRight = true;\n    }\n  },\n  mainElements: {\n    player: {\n      detectionHoldOnObject: function detectionHoldOnObject(o, numberAlgo) {\n        // toolsGame.mainElements.player.detectionHoldOnObject()\n        //console.log(\"my:\");\n        //console.log(this.obj.position.x-o.position.x);\n        //console.log(\"phaser:\");\n        //console.log(game.physics.arcade.distanceBetween(toolsGame.mainElements.player.obj,o));\n        if (this.obj.position.x > o.position.x - game.width / numberAlgo && this.obj.position.x < o.position.x + game.width / numberAlgo && this.obj.position.y > o.position.y - game.height / numberAlgo && this.obj.position.y < o.position.y + game.height / numberAlgo) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      detectionHoldOnTile: function detectionHoldOnTile(x, y, numberAlgo) {\n        // toolsGame.mainElements.player.detectionHoldOnObject()\n        if (this.obj.position.x > x * tileSize - game.width / numberAlgo && this.obj.position.x < x * tileSize + game.width / numberAlgo && this.obj.position.y > y * tileSize - game.height / numberAlgo && this.obj.position.y < y * tileSize + game.height / numberAlgo) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      countLifes: function countLifes() {\n        // toolsGame.mainElements.player.countLifes.f()\n        //\\\\//\n        if (!Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('Lifes')) {\n          toolsGame.mainElements.player.numberLifes = amountLife;\n        } else {\n          toolsGame.mainElements.player.numberLifes = parseInt(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('Lifes'));\n        }\n\n        if (!Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('main-Lifes')) {\n          toolsGame.mainElements.player.numberMainLifes = amountMainLife;\n        } else {\n          toolsGame.mainElements.player.numberMainLifes = parseInt(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('main-Lifes'));\n        }\n      },\n      countCoins: function countCoins() {\n        // toolsGame.mainElements.player.countCoints.f()\n        //\\\\//\n        if (!Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins')) {\n          toolsGame.mainElements.player.numberCoins = 0;\n        } else {\n          toolsGame.mainElements.player.numberCoins = parseInt(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins'));\n        }\n\n        if (Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-' + levelFile.activeIdLevel) > 0) {\n          toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory = Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-' + levelFile.activeIdLevel);\n        } else {\n          toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory = 0;\n        }\n\n        toolsGame.mainElements.player.numberCoinsLevel = 0;\n        toolsGame.mainElements.player.numberCoinsLevelProcent = 0;\n        toolsGame.mainElements.logs.lengthBonusCoins = 0; //alert(getCookies('Lifes'));\n        //toolsGame.mainElements.player.numberCoins = parseInt(getCookies('coins'));\n      },\n      lostLife: function lostLife(player, amount) {\n        if (!player.holdLostLife) {\n          player.holdLostLife = true; // player.gun\n          //console.log(toolsGame.mainElements.player.gun.obj);\n          // if(toolsGame.mainElements.player.gun.obj) {\n          //    toolsGame.mainElements.player.gun.obj.alpha=0.1;\n          // }\n          //toolsGame.mainElements.player.gun.obj.alpha = 0;\n\n          if (!levelFile.blockedKeys && toolsGame.mainElements.player.numberLifes > 0) {\n            toolsGame.mainElements.player.numberLifes -= amount ? amount : 1;\n            toolsGame.audio.scream();\n            player.scale.setTo(1, 1);\n            this.scale(); // same === toolsGame.mainElements.player.scale();\n          }\n\n          if (toolsGame.mainElements.player.numberLifes < 1) {\n            if (!levelFile.blockedKeys && !toolsGame.mainElements.player.gameOver) {\n              // player.body.x=saveX;\n              // player.body.y=saveY;\n              // shake durning lost Life\n              game.camera.shake(0.02, 450, true, Phaser.Camera.SHAKE_VERTICAL);\n              toolsGame.audio.quake(1);\n              levelFile.blockedKeys = true;\n              toolsGame.mainElements.player.numberLifes = 0;\n\n              if (toolsGame.mainElements.player.gun.obj) {\n                toolsGame.mainElements.player.gun.obj.destroy();\n                toolsGame.mainElements.player.gun.obj = false;\n              } // animation kill player\n              //console.log(toolsGame.mainElements.player.obj); //.events.onAnimationComplete\n\n\n              toolsGame.mainElements.player.obj.animations.play('kill-right');\n              toolsGame.mainElements.player.numberMainLifes--; //console.log(\"kill...\");\n            }\n\n            if (toolsGame.mainElements.player.numberMainLifes === 0) {\n              toolsGame.mainElements.player.gameOver = true; // toolsGame.mainElements.player.obj.body.position.x=-10000;\n              // toolsGame.mainElements.player.obj.body.position.y=-10000;\n              // game over\n              // setTimeout(function(){\n              //     toolsGame.windows.boxMenu.show('game-over');\n              //     toolsGame.mainElements.player.gameOver = false;\n              // },600);\n\n              game.time.events.add(1500, function () {\n                toolsGame.windows.boxMenu.show('game-over'); //toolsGame.mainElements.player.gameOver = false;\n              }, this);\n            } else {\n              game.time.events.add(1200, function () {\n                toolsGame.mainElements.player.numberLifes = amountLife;\n                toolsGame.windows.boxTopMenu.f = false;\n                game.time.events.add(1000, function () {\n                  levelFile.blockedKeys = false;\n                  facing = 'idle';\n                }, this);\n              }, this); // setTimeout(function(){\n              //     toolsGame.mainElements.player.numberLifes=amountLife;\n              //     toolsGame.windows.boxTopMenu.f=false;\n              //     setTimeout(function () {\n              //         levelFile.blockedKeys = false;\n              //         facing = 'idle';\n              //     },1000);\n              // },1200);\n            }\n          }\n\n          game.time.events.remove(player.timeoutKill);\n          player.timeoutKill = game.time.events.add(800, function () {\n            player.holdLostLife = false;\n            player.alpha = 1; //if(levelFile.blockedKeys) player.alpha = 0;\n\n            game.time.events.remove(player.fltTime);\n          }, this); // clearTimeout(player.timeoutKill);\n          // player.timeoutKill = setTimeout(function () {\n          // \tplayer.holdLostLife = false;\n          // \tplayer.alpha = 1;\n          // \t//if(levelFile.blockedKeys) player.alpha = 0;\n          // \tclearInterval(player.fltTime);\n          // }, 800);\n          // postac miga podczas kolizji z imtruzem/layerem z duzej wysokosci ubytek zycia\n          //game.time.events.loop\n\n          player.fltTime = game.time.events.loop(50, function () {\n            player.alpha = player.alpha === 0.4 ? 1 : 0.4;\n          }, this); // player.fltTime = setInterval(function () {\n          // \tplayer.alpha = (player.alpha === 0.4) ?  1 : 0.4;\n          // },50);\n        }\n\n        toolsGame.windows.boxTopMenu.f = false;\n      },\n      checkIfWasKilledAndOther: function checkIfWasKilledAndOther(player, type) {\n        if (!theEndCredits) {\n          if (player.touchGround) {\n            // toolsGame.mainElements.player.obj.touchGround\n            //clearTimeout(player.touchGroundTime);\n            game.time.events.remove(player.touchGroundTime);\n            player.touchGround = false;\n          } // fix foe kladki-poziom - dopracowac\n\n\n          if (type === 'kladki-poziom') {\n            player.onGround = true;\n          }\n\n          player.t1 = true;\n\n          if (!player.onGround) {\n            toolsGame.audio.footStep(); //console.log(\"step\");\n\n            player.onGround = true;\n          }\n\n          if (cursors.left.isDown || cursors.right.isDown) {\n            toolsGame.audio.footStep();\n          } //console.log(toolsGame.mainElements.player.obj.body.y);\n          //console.log(toolsGame.mainElements.player.obj.body.blocked.left);\n          //przetestować jeszcze\n\n\n          if (jumpKillF && !toolsGame.mainElements.player.obj.body.blocked.left && !toolsGame.mainElements.player.obj.body.blocked.right) {\n            if (toolsGame.mainElements.player.obj.body.y - jumpKillY > 250) {\n              game.camera.shake(0.02, 250, true, Phaser.Camera.SHAKE_VERTICAL);\n              toolsGame.audio.quake(1);\n            }\n\n            if (toolsGame.mainElements.player.obj.body.y - jumpKillY > 400) {\n              //alert(\"kill\");\n              toolsGame.mainElements.player.lostLife(player, 3);\n            } //console.log('coordination: ' + jumpKillY + ' / ' + toolsGame.mainElements.player.obj.body.y);\n\n\n            jumpKillF = false;\n          }\n        }\n      },\n      gun: {\n        obj: false,\n        //toolsGame.mainElements.player.gun.obj\n        startGun: false,\n        //toolsGame.mainElements.player.gun.startGun\n        bullets: {\n          obj: false,\n          // toolsGame.mainElements.player.gun.bullets.obj\n          restartBullets: function restartBullets() {\n            // toolsGame.mainElements.player.gun.bullets.restartBullets()\n            if (this.obj === true) {\n              this.obj.z = 0;\n              this.obj.destroy(true);\n            }\n\n            this.obj = game.add.group();\n            this.obj.enableBody = true;\n            this.obj.createMultiple(9, 'bullet');\n            this.obj.setAll('anchor.x', 0.5);\n            this.obj.setAll('anchor.y', 1);\n          }\n        },\n        visualGun: function visualGun(player) {\n          // toolsGame.mainElements.player.gun.visualGun()\n          if (this.obj) {\n            if (player.obj.frame >= 6 && player.obj.frame <= 11 || cursors.left.isDown) {\n              this.obj.scale.x = -1;\n              this.obj.reset(player.obj.x + 18, player.obj.y + 38);\n            } else if (player.obj.frame >= 0 && player.obj.frame <= 5 || cursors.right.isDown) {\n              this.obj.scale.x = 1;\n              this.obj.reset(player.obj.x + 18, player.obj.y + 38);\n            }\n          }\n        },\n        shot: function shot(player) {\n          // toolsGame.mainElements.player.gun.shot()\n          if (fireButton.isDown && toolsGame.mainElements.player.numberLifes && !levelFile.blockedKeys) {\n            if (player.countBullets > 0 && game.time.now > player.bulletTime) {\n              //  Grab the first bullet we can from the pool\n              player.bullet = player.gun.bullets.obj.getFirstExists(false);\n\n              if (player.bullet) {\n                player.countBulletsF = true;\n                player.countBullets--;\n                toolsGame.windows.boxTopMenu.f = false;\n                toolsGame.audio.shoot(); //clearTimeout(player.gun.startGun);\n\n                game.time.events.remove(player.gun.startGun);\n\n                if (!player.gun.obj) {\n                  player.gun.obj = game.add.image(player.obj.x, player.obj.y, \"gun\");\n                }\n\n                player.gun.startGun = game.time.events.add(1000, function () {\n                  if (player.gun.obj) {\n                    player.gun.obj.destroy();\n                    player.gun.obj = false;\n                    game.time.events.remove(player.gun.startGun);\n                  }\n                }, this);\n\n                if (player.obj.frame >= 6 && player.obj.frame <= 11 || cursors.left.isDown) {\n                  player.bullet.reset(player.obj.x + 10, player.obj.y + 42);\n                  player.bullet.body.velocity.x = -1400;\n                  player.bullet.direction = 'left';\n                } else if (player.obj.frame >= 0 && player.obj.frame <= 5 || cursors.right.isDown) {\n                  player.bullet.reset(player.obj.x + 30, player.obj.y + 42);\n                  player.bullet.body.velocity.x = 1400;\n                  player.bullet.direction = 'right';\n                } //bullet.body.allowGravity = false;\n\n\n                player.bulletTime = game.time.now + 200; //console.log(bullet.z);\n              } else {\n                player.bullet = 0;\n                player.gun.bullets.restartBullets();\n              }\n            }\n          }\n        }\n      },\n      bullet: false,\n      //toolsGame.mainElements.player.bullet\n      bulletTime: 0,\n      //toolsGame.mainElements.player.bulletTime\n      countBulletsF: false,\n      countBullets: 6,\n      //toolsGame.mainElements.player.countBullets\n      jumpTimer: 0,\n      //toolsGame.mainElements.player.jumpTimer\n      obj: false,\n      add: function add(x, y) {\n        //add visual player\n        if (this.obj == false) {\n          //toolsGame.mainElements.player.obj =  player\n          this.obj = game.add.sprite(x * tileSize, y * tileSize - 4 * tileSize, 'dude');\n          game.physics.enable(this.obj, Phaser.Physics.ARCADE);\n          this.obj.body.bounce.y = 0.3;\n          this.obj.body.collideWorldBounds = true;\n          this.obj.animations.add('idle-right', [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 33, 3, 4, 5], 6, true);\n          this.obj.animations.add('idle-left', [6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7, 34, 9, 10, 11], 6, true);\n          this.obj.animations.add('end-level', [38, 37, 36, 37, 38], 10, true); // false - animacja konczy sie na ostatnim slajdzie\n\n          this.obj.animations.add('jump-right', [25], 20, true);\n          this.obj.animations.add('jump-left', [26], 20, true);\n          this.obj.animations.add('kill-right', [28, 29, 30, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], 16, false).onComplete.add(function () {\n            toolsGame.mainElements.player.generateAgain = true;\n          }, this);\n          this.obj.animations.add('left', [18, 19, 20, 21, 22, 23], 20, true);\n          this.obj.animations.add('right', [12, 13, 14, 15, 16, 17], 20, true); //this.obj.body.allowGravity = false;\n          //game.camera.follow(this.obj);\n\n          game.camera.follow(this.obj, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1); //console.log(game.camera.lerp);\n\n          this.gun.bullets.restartBullets();\n\n          if (!Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('bullets')) {\n            this.countBullets = amountBullet;\n          } else {\n            this.countBullets = parseInt(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('bullets'));\n          }\n\n          this.gun.obj = false;\n          saveX = x * tileSize;\n          saveY = y * tileSize; //console.log(x + \" x \" + y);\n        }\n      },\n      velocityNormal: playerJumpVelocityNormalSmall,\n      velocityWater: playerJumpVelocityWaterSmall,\n      scale: function scale() {\n        // toolsGame.mainElements.player.scale();\n        var playerScale = toolsGame.mainElements.player.obj.scale.y !== 1;\n        this.velocityNormal = playerScale ? playerJumpVelocityNormalBig : playerJumpVelocityNormalSmall; // 530:430\n\n        this.velocityWater = playerScale ? playerJumpVelocityWaterBig : playerJumpVelocityWaterSmall; // 300:200\n      }\n    },\n    intruzi: {\n      // toolsGame.mainElements.intruzi\n      obj: true,\n      id: 0,\n      add: function add(x, y, type) {\n        //toolsGame.mainElements.intruzi.obj =  intruzi\n        // po co to?\n        // if(!this.typeIntruder || this.typeIntruder===3) {\n        //    this.typeIntruder=1;\n        // } else if(this.typeIntruder===1) {\n        //    this.typeIntruder=2;\n        // } else if(this.typeIntruder===2) {\n        //    this.typeIntruder=3;\n        // }\n        //var typeIntruder = Math.floor(Math.random() * 3)+1; // 3 typy intruzów\n        //console.log(this.typeIntruder);\n        var intruz = this.obj.create(x * tileSize, y * tileSize - 2 * tileSize, 'intruder' + type);\n        intruz.scale.setTo(0, 0); //console.log(intruz.scale);\n        //intruz.scale.setTo(1, 1);\n\n        game.add.tween(intruz.scale).to({\n          x: 1,\n          y: 1\n        }, 400, Phaser.Easing.Linear.None, true);\n        intruz.type = type;\n        intruz.wspStartX = x;\n        intruz.wspStartY = y;\n        game.physics.enable(intruz, Phaser.Physics.ARCADE);\n        intruz.body.bounce.y = 0.4;\n        intruz.body.collideWorldBounds = true; // intruz.animations.add('left', [6, 7, 8, 9, 10, 11], 10, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n        // intruz.animations.add('right', [0, 1, 2, 3, 4, 5], 10, true);\n\n        intruz.randomSpeed = fispeed[Math.floor(Math.random() * fispeed.length)];\n\n        if (type === 4) {\n          intruz.animations.add('left', [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], intruz.randomSpeed / 8, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n\n          intruz.animations.add('right', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], intruz.randomSpeed / 8, true);\n          intruz.animations.add('idle-right', [6], 6, true);\n          intruz.animations.add('idle-left', [20], 6, true);\n          intruz.animations.add('kill', [28, 29, 30, 31, 32, 33, 34, 35], 15, false);\n          intruz.animations.add('turn-left', [40, 37], 5, false);\n          intruz.animations.add('turn-right', [41, 37], 5, false);\n        } else if (type === 5) {\n          intruz.animations.add('left', [14, 15, 16, 17, 18, 21, 22, 23, 24, 25], intruz.randomSpeed / 8, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n\n          intruz.animations.add('right', [0, 1, 2, 3, 4, 7, 8, 9, 10, 11], intruz.randomSpeed / 8, true);\n          intruz.animations.add('idle-right', [6], 6, true);\n          intruz.animations.add('idle-left', [20], 6, true);\n          intruz.animations.add('kill', [28, 29, 30, 31, 32, 33, 34, 35], 15, false);\n          intruz.animations.add('turn-left', [40, 37], 5, false);\n          intruz.animations.add('turn-right', [41, 37], 5, false);\n        } else {\n          intruz.animations.add('left', [18, 19, 20, 21, 22, 23], intruz.randomSpeed / 8, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n\n          intruz.animations.add('right', [12, 13, 14, 15, 16, 17], intruz.randomSpeed / 8, true);\n          intruz.animations.add('idle-right', [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 33, 3, 4, 5], 6, true);\n          intruz.animations.add('idle-left', [6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7, 34, 9, 10, 11], 6, true);\n          intruz.animations.add('kill', [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47], 20, false);\n        }\n\n        intruz.randomMove = parseInt(Math.random() * 2) ? 'intruzRight' : 'intruzLeft'; //console.log(\"c i\");\n      },\n      jump: function jump(intruz, yVelocity) {\n        var jumpTimerIntruz = 0;\n\n        if (intruz.body.onFloor() && game.time.now > jumpTimerIntruz) {\n          intruz.body.velocity.y = -yVelocity;\n          jumpTimerIntruz = game.time.now + yVelocity;\n\n          if (intruz.type === 5) {\n            intruz.jumpToFly = true;\n            game.time.events.add(300, function () {\n              intruz.jumpToFly = false;\n            }, this);\n          }\n        }\n      },\n      collisionIntruz: function collisionIntruz(intruz, destiny) {\n        // toolsGame.mainElements.intruzi.collisionIntruz\n        if (intruz.randomMove === 'intruzRight' || intruz.randomMove === 'intruzLeft') {\n          intruz.saveRandom = intruz.randomMove;\n        } else {\n          intruz.saveRandom = 'intruzRight';\n        }\n\n        var ftf = game.time.events.loop(1000 / 60, function () {\n          if (Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"isEven\"])(Math.ceil(game.time.now / 100))) {\n            //if(destiny==\"total-kill\") intruz.alpha=0.2;\n            intruz.body.velocity.y = -30;\n          } else {} //intruz.alpha=1;\n          //intruz.scale.setTo(0.5,0.5);\n\n\n          if (destiny !== \"total-kill\") {\n            if (intruz.type === 4) {\n              if (intruz.randomMove == 'intruzRight') {\n                intruz.frame = 38;\n              } else if (intruz.randomMove == 'intruzLeft') {\n                intruz.frame = 39;\n              }\n            }\n\n            if (intruz.randomMove == 'intruzRight' || intruz.randomMove == 'intruzLeft') {\n              intruz.randomMove = 'intruzStop';\n              toolsGame.mainElements.player.obj.body.velocity.y = -350;\n            }\n          }\n        }, this);\n\n        if (destiny === \"total-kill\") {\n          toolsGame.audio.breakBones(0.5);\n          toolsGame.audio.explosionIntruder();\n\n          if (intruz.type === 4) {\n            intruz.animations.add('left', [28, 29, 30, 31, 32, 33, 34, 35], 15, false);\n            intruz.animations.add('right', [28, 29, 30, 31, 32, 33, 34, 35], 15, false);\n          } else if (intruz.type === 5) {\n            //alert(\"x\");\n            intruz.animations.add('left', [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47], 20, false);\n            intruz.animations.add('right', [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47], 20, false);\n          } else {\n            intruz.animations.add('left', [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47], 20, false);\n            intruz.animations.add('right', [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47], 20, false);\n          }\n\n          intruz.randomSpeed = 0;\n          game.time.events.add(500, function () {\n            intruz.killed = false;\n            game.time.events.remove(ftf); // to ponizej nie potrzebne\n            // intruz.randomSpeed=fispeed[Math.floor(Math.random() * fispeed.length)];\n            // if(intruz.type === 4) {\n            //     intruz.animations.add('left', [14,15,16,17,18,19,20,21,22,23,24,25,26,27], intruz.randomSpeed/8, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n            //     intruz.animations.add('right', [0,1,2,3,4,5,6,7,8,9,10,11,12,13], intruz.randomSpeed/8, true);\n            // } else if(intruz.type === 5) {\n            //     intruz.animations.add('left', [14,15,16,17,18,21,22,23,24,25], intruz.randomSpeed/8, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n            //     intruz.animations.add('right', [0,1,2,3,4,7,8,9,10,11], intruz.randomSpeed/8, true);\n            // }else {\n            //     intruz.animations.add('left', [18, 19, 20, 21, 22, 23], intruz.randomSpeed / 8, true); //12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22\n            //     intruz.animations.add('right', [12, 13, 14, 15, 16, 17], intruz.randomSpeed / 8, true);\n            // }\n\n            intruz.randomMove = 'intruzDelete';\n          }, this);\n        } else {\n          game.time.events.add(100, function () {\n            game.time.events.remove(ftf); //intruz.randomMove='intruzRight'\n            //console.log(intruz.saveRandom);\n\n            intruz.randomMove = intruz.saveRandom; //intruz.alpha=1;\n          }, this);\n        }\n\n        toolsGame.mainElements.player.obj.body.overlapY = 0;\n      },\n      collisionBack: function collisionBack(i) {\n        if (!i.checkPosition) {\n          i.checkPosition = i.body.position.x; // setTimeout(function () {\n          //     //console.log(i.checkPosition + \" - \" + i.body.position.x);\n          //     if(Math.abs(i.checkPosition-i.body.position.x)<2) {\n          //         //console.log(\"stoi w miejscu\");\n          //         if(i.randomMove === 'intruzRight') i.randomMove='intruzLeft';\n          //         else i.randomMove='intruzRight';\n          //     }\n          //     i.checkPosition = false;\n          // },600);\n\n          game.time.events.add(600, function () {\n            //console.log(i.checkPosition + \" - \" + i.body.position.x);\n            if (Math.abs(i.checkPosition - i.body.position.x) < 2) {\n              //console.log(\"stoi w miejscu\");\n              if (i.randomMove === 'intruzRight') i.randomMove = 'intruzLeft';else i.randomMove = 'intruzRight';\n            }\n\n            i.checkPosition = false;\n          }, this);\n        }\n      }\n    },\n    coins: {\n      //obj: true,\n      add: function add(x, y) {\n        //toolsGame.mainElements.coins.obj = coins\n        var coin = this.obj.create(x * tileSize, y * tileSize, 'coin');\n        coin.animations.add('run', [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n        coin.animations.play('run', 18, true); // var fun = function () {\n        //     var tween = game.add.tween(coin).to({y: (y*tileSize-16)}, 900, Phaser.Easing.Linear.None, true);\n        //     //console.log(tween);\n        //     tween.onComplete.add(function(){\n        //         tween = game.add.tween(coin).to({y: (y*tileSize)}, 900, Phaser.Easing.Linear.None, true);\n        //         tween.onComplete.add(fun, this);\n        //     }, this);\n        // };\n        // fun();\n\n        coin.body.allowGravity = false;\n      }\n    },\n    logs: {\n      //obj: true,\n      lengthBonusCoins: 0,\n      add: function add(x, y, type) {\n        //toolsGame.mainElements.log.obj = logs\n        var log = this.obj.create(x * tileSize, y * tileSize, 'log');\n        log.animations.add('run');\n        game.physics.enable(log, Phaser.Physics.ARCADE); //log.animations.play('run', 15, true);\n\n        log.body.allowGravity = false;\n        log.body.collideWorldBounds = true;\n        log.body.immovable = true;\n\n        if (type === 'coin') {\n          log.coin = true;\n        } else if (type === 'surprise') {\n          var lotterySuprise = Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(1, 5); // console.log(lotterySuprise);\n\n          switch (lotterySuprise) {\n            case 1:\n              log.surprise = 1;\n              break;\n\n            case 2:\n              log.surprise = 2;\n              break;\n\n            case 3:\n              log.surprise = 3;\n              break;\n\n            case 4:\n              log.surprise = 4;\n              toolsGame.mainElements.logs.lengthBonusCoins++;\n              break;\n\n            case 5:\n              log.surprise = 5;\n              break;\n          }\n        }\n      }\n    },\n    Lifes: {\n      //toolsGame.mainElements.Lifes.obj = Lifes\n      //obj: true,\n      add: function add(x, y) {\n        //toolsGame.mainElements.Lifes.obj = Lifes\n        var Life = this.obj.create(x * tileSize, y * tileSize, 'Life');\n        Life.animations.add('run', [2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1]);\n        Life.animations.play('run', 18, true);\n        Life.body.allowGravity = false;\n      }\n    },\n    LifeSingleS: {\n      //toolsGame.mainElements.Lifes.obj = Lifes\n      //obj: true,\n      add: function add(x, y) {\n        var Life = this.obj.create(x * tileSize, y * tileSize, 'Life2');\n        Life.animations.add('run', [4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3]);\n        Life.animations.play('run', 18, true);\n        Life.body.allowGravity = false;\n      }\n    },\n    bulletsGuns: {\n      //obj: true,\n      add: function add(x, y) {\n        //toolsGame.mainElements.bulletsGuns.obj = bullets_guns\n        var bullets_gun = this.obj.create(x * tileSize - 5, y * tileSize - 5, 'bullets_gun');\n        bullets_gun.animations.add('run', [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]);\n        bullets_gun.animations.play('run', 18, true);\n        bullets_gun.body.allowGravity = false;\n      }\n    },\n    keys: {\n      //obj: true,\n      add: function add(x, y) {\n        var key = this.obj.create(x * tileSize, y * tileSize, 'key');\n        key.animations.add('run', [7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6]);\n        key.animations.play('run', 18, true);\n        key.body.allowGravity = false;\n      }\n    },\n    locks: {\n      //obj: true,\n      add: function add(x, y, reverse) {\n        var lock = this.obj.create(x * tileSize + (reverse ? tileSize : 0), y * tileSize, 'lock');\n        if (reverse) lock.scale.x *= -1;\n        lock.body.allowGravity = false;\n      }\n    },\n    doors: {\n      //obj: true,\n      add: function add(x, y) {\n        var door = toolsGame.createCenterObject(this.obj, x, y, \"door\");\n        door.animations.add('run'); //door.animations.play('run', 15, true);\n\n        game.physics.enable(door, Phaser.Physics.ARCADE); //log.animations.play('run', 15, true);\n\n        door.body.allowGravity = false;\n        door.body.collideWorldBounds = true;\n        door.body.immovable = true;\n      }\n    },\n    cacti: {\n      //obj: true,\n      add: function add(x, y) {\n        var cactus = toolsGame.createCenterObject(this.obj, x, y, \"cactus\");\n        cactus.body.allowGravity = false;\n      }\n    },\n    grassLeft: {\n      //obj: true,\n      add: function add(x, y) {\n        var grass = toolsGame.createLeftObject(this.obj, x, y, \"grassLr\");\n        grass.body.allowGravity = false;\n      }\n    },\n    grassAnim: {\n      //obj: true,\n      add: function add(x, y, type) {\n        var grass = toolsGame.createCenterObject(this.obj, x, y, \"grass-lr-anim\", \"sprite\");\n        grass.animations.add('run', [0, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 0]);\n        grass.animations.play('run', 8, true);\n\n        if (type === 'right') {\n          grass.scale.x *= -1;\n          grass.anchor.setTo(1, 0);\n        }\n\n        grass.body.allowGravity = false;\n      }\n    },\n    grassRight: {\n      //obj: true,\n      add: function add(x, y) {\n        var grass = toolsGame.createLeftObject(this.obj, x, y, \"grassLr\");\n        grass.body.allowGravity = false;\n        grass.scale.x *= -1;\n      }\n    },\n    caves: {\n      //obj: true,\n      add: function add(x, y) {\n        var cave = this.obj.create(x * tileSize + 2 * tileSize, y * tileSize - 240, 'cave');\n        cave.body.allowGravity = false;\n      }\n    },\n    // blankTileS:{\n    //     obj: true,\n    //     add: function(x,y) {\n    //         var blankTile = this.obj.create((x*tileSize), (y*tileSize), 'blank-tile');\n    //\n    //         game.physics.enable(blankTile, Phaser.Physics.ARCADE);\n    //         blankTile.body.collideWorldBounds = true;\n    //         blankTile.body.immovable = true;\n    //\n    //         blankTile.body.allowGravity = false;\n    //     }\n    // },\n    building1s: {\n      //obj: true,\n      add: function add(x, y) {\n        var building = toolsGame.createCenterObject(this.obj, x, y, \"building1\"); //this.obj.create((x*tileSize)+(2*tileSize)-(game.cache.getImage(\"building1\").width﻿/2), (y*tileSize)-(game.cache.getImage(\"building1\").height-tileSize), 'building1');\n\n        building.body.allowGravity = false;\n      }\n    },\n    building2s: {\n      //obj: true,\n      add: function add(x, y) {\n        var building = toolsGame.createCenterObject(this.obj, x, y, \"building2\"); //this.obj.create((x*tileSize)+(2*tileSize)-(game.cache.getImage(\"building2\").width﻿/2), (y*tileSize)-(game.cache.getImage(\"building2\").height-tileSize), 'building2');\n\n        building.body.allowGravity = false;\n      }\n    },\n    building3s: {\n      //obj: true,\n      add: function add(x, y) {\n        var building = toolsGame.createCenterObject(this.obj, x, y, \"building3\");\n        building.body.allowGravity = false;\n      }\n    },\n    mines: {\n      //obj: true,\n      add: function add(x, y) {\n        var building2 = toolsGame.createCenterObject(this.obj, x + 6.5, y, \"mine-part-2\", \"sprite\");\n        building2.animations.add('run', [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0, 6, 7, 8, 9, 10, 9, 8, 7, 6]);\n        building2.animations.play('run', 12, true);\n        building2.body.allowGravity = false;\n        var building1 = toolsGame.createCenterObject(this.obj, x - 0.2, y, \"mine-part-1\");\n        building1.body.allowGravity = false;\n      }\n    },\n    waters: {\n      //obj: true,\n      add: function add(x, y, type) {\n        var water = toolsGame.createLeftObject(this.obj, x, y, type ? type : \"water\", \"sprite\");\n        water.animations.add('run');\n        water.animations.play('run', 16, true);\n        water.body.allowGravity = false;\n        water.alpha = type ? .7 : .7;\n\n        if (type === 'water-red') {\n          water.type = 'water-red';\n        }\n      }\n    },\n    firebs: {\n      //obj: true,\n      add: function add(x, y, randomStart, typeFire) {\n        var fireb = toolsGame.createLeftObject(this.obj, x, y, typeFire ? \"fireb2\" : \"fireb\", \"sprite\");\n\n        if (!typeFire) {\n          fireb.animations.add('run1', [0, 1, 2, 1]);\n          fireb.animations.add('run2', [3, 4, 5, 4]);\n        } else {\n          fireb.typeFire = true;\n        }\n\n        fireb.body.allowGravity = false;\n        fireb.alpha = 0;\n        fireb.randomStart = randomStart;\n      }\n    },\n    splashs: {\n      //obj: true,\n      add: function add(x, y, typeColor, typeName) {\n        var splash = toolsGame.createCenterObject(this.obj, x, y, typeColor ? typeColor : \"splash\", \"sprite\");\n        splash.animations.add('run').onComplete.add(function (s) {\n          //toolsGame.mainElements.player.obj.gForceWaterOnlyeOne = false;\n          s.kill();\n        }, this);\n        splash.animations.play('run', 30, false);\n        splash.body.allowGravity = false;\n        splash.alpha = .6;\n\n        if (typeName === 'blood') {\n          splash.position.y = splash.position.y - 2 * tileSize;\n          splash.position.x = splash.position.x + tileSize;\n          splash.scale.setTo(.8, .8);\n          splash.alpha = .9; // splash.scale.y *= -1;\n          // splash.anchor.setTo(.5,.5);﻿\n        } else {\n          toolsGame.audio.splash();\n        }\n      }\n    },\n    endLevelS: {\n      //end_level_s\n      //obj: true, // toolsGame.mainElements.endLevelS.obj = end_level_s\n      add: function add(x, y) {\n        var end_level = toolsGame.createCenterObject(this.obj, x, y, \"end_level\", \"sprite\"); //var end_level = this.obj.create((x*tileSize)-42, (y*tileSize)-110, 'end_level');\n\n        end_level.animations.add('run');\n        end_level.animations.play('run', 17, true);\n        end_level.body.allowGravity = false;\n      }\n    },\n    saveLevelS: {\n      //obj: true, // toolsGame.mainElements.endLevelS.obj = end_level_s\n      add: function add(x, y, type) {\n        var save_level = toolsGame.createCenterObject(this.obj, x, y, \"save_level\", \"sprite\"),\n            frames1,\n            frames2; //var save_level = this.obj.create((x*tileSize)-42, (y*tileSize)-110, 'save_level');\n\n        if (type === '<-') {\n          frames1 = [26, 25, 24, 23, 22, 22, 23, 24, 25, 26, 26, 21, 20, 19, 18, 18, 19, 20, 21, 26]; // 18-26\n\n          frames2 = [35, 34, 33, 32, 31, 31, 32, 33, 34, 35, 35, 30, 29, 28, 27, 27, 28, 29, 30, 35]; // 27-35\n        } else {\n          frames1 = [0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 5, 6, 7, 8, 8, 7, 6, 5, 0];\n          frames2 = [9, 10, 11, 12, 13, 13, 12, 11, 10, 9, 9, 14, 15, 16, 17, 17, 16, 15, 14, 9];\n        }\n\n        save_level.animations.add('run1', frames1);\n        save_level.animations.add('run2', frames2);\n        save_level.animations.play('run1', 17, true);\n        save_level.body.allowGravity = false;\n      }\n    },\n    fire: {\n      fireAnimation: function fireAnimation(that, x, y, type) {\n        var fire = that.obj.create(x, y, type);\n        fire.animations.add('run');\n        fire.animations.play('run', Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(24, 30), true);\n        fire.alpha = .8;\n        fire.body.allowGravity = false;\n      },\n      fireUpS: {\n        //obj: true,\n        add: function add(x, y) {\n          toolsGame.mainElements.fire.fireAnimation(this, x * tileSize - 4, y * tileSize - 8, 'fire_up');\n        }\n      },\n      fireDownS: {\n        //obj: true,\n        add: function add(x, y) {\n          toolsGame.mainElements.fire.fireAnimation(this, x * tileSize - 4, y * tileSize, 'fire_down');\n        }\n      },\n      fireLeftS: {\n        //obj: true,\n        add: function add(x, y) {\n          toolsGame.mainElements.fire.fireAnimation(this, x * tileSize - 8, y * tileSize - 4, 'fire_left');\n        }\n      },\n      fireRightS: {\n        //obj: true,\n        add: function add(x, y) {\n          toolsGame.mainElements.fire.fireAnimation(this, x * tileSize, y * tileSize - 4, 'fire_right');\n        }\n      }\n    },\n    windmills: {\n      //obj: true,\n      add: function add(x, y) {\n        //alert(game.cache._cache.image[\"windmill\"].frameWidth);\n        // console.log(game.cache);\n        // alert(game.cache.getImage(\"windmill\"));\n        var windmill = toolsGame.createCenterObject(this.obj, x, y, \"windmill\", \"sprite\"); //  this.obj.create((x*tileSize)-52, (y*tileSize)-306, 'windmill');\n\n        windmill.animations.add('run');\n        windmill.animations.play('run', 20, true);\n        windmill.body.allowGravity = false;\n      }\n    },\n    windmillNewS: {\n      // toolsGame.mainElements.windmillNewS.obj\n      //obj1: true,\n      //obj2: true,\n      add: function add(x, y) {\n        var w2 = toolsGame.createCenterObject(this.obj2, x, y, \"windmill_2_new\"); //this.obj2.create((x*tileSize), (y*tileSize)-200, 'windmill_2_new');\n\n        w2.body.allowGravity = false;\n        var w1 = this.obj1.create(x * tileSize + 9, y * tileSize - 240, 'windmill_1_new'); //  this.obj.create((x*tileSize)-52, (y*tileSize)-306, 'windmill');\n\n        w1.anchor.setTo(0.5, 0.5);\n        w1.body.allowGravity = false;\n      }\n    },\n    kladki: {\n      kladkaPlayerBounceReset: true,\n      // toolsGame.mainElements.kladki.kladkaPlayerBounceReset\n      poziom: {\n        //obj: true, // toolsGame.mainElements.kladki.poziom.obj = kladki\n        add: function add(x, y) {\n          var kladkaPoz = this.obj.create(x * tileSize, y * tileSize, 'kladka-short');\n          game.physics.enable(kladkaPoz, Phaser.Physics.ARCADE);\n          kladkaPoz.body.collideWorldBounds = true;\n          kladkaPoz.body.allowGravity = false;\n          kladkaPoz.body.immovable = true;\n        }\n      },\n      //\\\\\n      run: {\n        // for vertical only\n        startCollision: function startCollision(player, type) {\n          // toolsGame.mainElements.kladki.run.startCollision(player,type)\n          if (!player.lock) {\n            if (!player.back) {\n              if (type === 'pionTopBack' || type === 'pionTop') player.body.velocity.y = 150;else if (type === 'pionBottomBack' || type === 'pionBottom') player.body.velocity.y = -150;\n            } else {\n              if (type === 'pionTopBack' || type === 'pionTop') player.body.velocity.y = -150;else if (type === 'pionBottomBack' || type === 'pionBottom') player.body.velocity.y = 150;\n            }\n          } //console.log(\"player uderza w kladke\");\n\n\n          player.isUp = true;\n          toolsGame.mainElements.player.obj.body.bounce.y = 0;\n          game.time.events.add(300, function () {\n            player.isUp = false;\n          }, this); // setTimeout(function(){\n          //     player.isUp=false;\n          // },300);\n        },\n        endCollision: function endCollision(player, type) {\n          // toolsGame.mainElements.kladki.run.endCollision(kladka,type)\n          player.lock = true; //console.log(\"kladka uderza w layer\");\n\n          game.time.events.remove(player.resetart1);\n          player.resetart1 = game.time.events.add(2500, function () {\n            if (type === 'pionTopBack') {\n              if (!player.back) player.body.velocity.y = -150;\n            } else if (type === 'pionBottomBack') {\n              if (!player.back) player.body.velocity.y = 150;\n            }\n\n            player.back = player.back ? false : true;\n            player.lock = false;\n          }, this);\n        }\n      },\n      pionTopBack: {\n        //obj: true, // toolsGame.mainElements.kladki.pionTopBack.obj = pionTopBack\n        add: function add(x, y) {\n          var kladkapionTopBack = this.obj.create(x * tileSize, y * tileSize, 'kladka-short');\n          game.physics.enable(kladkapionTopBack, Phaser.Physics.ARCADE);\n          kladkapionTopBack.body.collideWorldBounds = true;\n          kladkapionTopBack.body.allowGravity = false;\n          kladkapionTopBack.body.immovable = true;\n          kladkapionTopBack.body.orginalY = y;\n        }\n      },\n      pionBottomBack: {\n        //obj: true, // toolsGame.mainElements.kladki.pionBottomBack.obj = pionBottomBack\n        add: function add(x, y) {\n          var kladkapionBottomBack = this.obj.create(x * tileSize, y * tileSize, 'kladka-short');\n          game.physics.enable(kladkapionBottomBack, Phaser.Physics.ARCADE);\n          kladkapionBottomBack.body.collideWorldBounds = true;\n          kladkapionBottomBack.body.allowGravity = false;\n          kladkapionBottomBack.body.immovable = true;\n          kladkapionBottomBack.body.orginalY = y;\n        }\n      },\n      pionTop: {\n        //obj: true, // toolsGame.mainElements.kladki.pionTop.obj = kladkipionTop\n        add: function add(x, y) {\n          var kladkaPionTop = this.obj.create(x * tileSize, y * tileSize, 'kladka-short');\n          game.physics.enable(kladkaPionTop, Phaser.Physics.ARCADE);\n          kladkaPionTop.body.collideWorldBounds = true;\n          kladkaPionTop.body.allowGravity = false;\n          kladkaPionTop.body.immovable = true;\n          kladkaPionTop.body.orginalY = y;\n        }\n      },\n      pionBottom: {\n        //obj: true, // toolsGame.mainElements.kladki.pionBottom.obj = kladkipionBottom\n        add: function add(x, y) {\n          var kladkaPionBottom = this.obj.create(x * tileSize, y * tileSize, 'kladka-short');\n          game.physics.enable(kladkaPionBottom, Phaser.Physics.ARCADE);\n          kladkaPionBottom.body.collideWorldBounds = true;\n          kladkaPionBottom.body.allowGravity = false;\n          kladkaPionBottom.body.immovable = true;\n          kladkaPionBottom.body.orginalY = y;\n        }\n      }\n    }\n  },\n  intruzCollisonBack: function intruzCollisonBack(intruz) {\n    // toolsGame.intruzCollisonBack(intruz);\n    var jumpTimerIntruz = 0;\n\n    if (intruz.body.onFloor() && game.time.now > jumpTimerIntruz) {\n      intruz.body.velocity.y = -350;\n      jumpTimerIntruz = game.time.now + 350;\n    }\n\n    if (jumpTimerIntruz !== 0) {\n      if (intruz.randomMove == 'intruzLeft') intruz.randomMove = 'intruzRight';else if (intruz.randomMove == 'intruzRight') intruz.randomMove = 'intruzLeft';\n    }\n  },\n  intruzCollisonNoBack: function intruzCollisonNoBack(intruz) {\n    // toolsGame.intruzCollisonBack(intruz);\n    var jumpTimerIntruz = 0;\n\n    if (intruz.body.onFloor() && game.time.now > jumpTimerIntruz) {\n      intruz.body.velocity.y = -350;\n      jumpTimerIntruz = game.time.now + 350;\n    }\n  },\n  addPoint: function addPoint(x, y, idName, text) {\n    toolsGame.text.show('add-point', x, y, 1, text, '700 15px Arial', '#ded4b8', false, idName, true); // to jest zbedne usuwanie jest zalatwiane po przez onComplete w show\n    // setTimeout(function(idN){\n    //     toolsGame.text.hide(idN);\n    // },900,idName);\n  }\n};\n\nvar startGame = function startGame(type, lastMap, percentLevel) {\n  levelFile.readyLoad = false;\n  levelFile.blockedKeys = false;\n\n  if (type === \"continuation\") {\n    levelFile.name = 'level' + unlockLevels;\n    levelFile.activeIdLevel = parseInt(unlockLevels);\n  }\n\n  game.physics.startSystem(Phaser.Physics.ARCADE); // wykrywanie otatniego levelu dla Credits\n\n  theEndCredits = false;\n\n  if (Object.keys(game.cache._cacheMap[7]).length === levelFile.activeIdLevel) {\n    theEndCredits = true;\n  }\n\n  toolsGame.preloader.add(13, 14, lastMap, percentLevel); //odmierzanie czasu co 1s\n\n  timer = game.time.create(false);\n  timerTotal = 0;\n  timer.loop(1000, function () {\n    if (!levelFile.blockedKeys) {\n      timerTotal++;\n    }\n  }, _this);\n  timer.start();\n  game.time.advancedTiming = true;\n  game.time.desiredFps = window.innerWidth < 800 ? 40 : 50; //game.time.desiredFps = 60;\n  //reset inkubatorow\n\n  wspInkub = []; //reset klucza/y\n\n  keys = 0; //usuwanie przyciskow leveli\n\n  toolsGame.buttons.levels.hide(); //usuwanie logo text\n\n  toolsGame.text.hide('logoText'); // usuwanie tla menu\n\n  bgMenu.destroy(); //usuwanie przycisku menu\n\n  toolsGame.buttons.openBoxMenu.hide(); //game.time.slowMotion = 1.0;\n  //cookies Lifes\n\n  toolsGame.mainElements.player.countLifes(); //cookies coins\n\n  toolsGame.mainElements.player.countCoins();\n  var loaderSpeed = 300;\n\n  if (theEndCredits) {\n    if (lastMap) {\n      loaderSpeed = 2000;\n    } else {\n      loaderSpeed = 0;\n    }\n  }\n\n  game.time.events.add(loaderSpeed, function () {\n    map = game.add.tilemap(levelFile.name);\n    map.addTilesetImage('tiles-1');\n    levelFile.blockedKeys = false; //console.log(proportiesMap[levelFile.activeIdLevel]);\n    // map.setTileIndexCallback(9, function(objectCollision,mapElement){\n    // \tif(objectCollision.key==\"dude\")\n    // \t{\n    // \t\t//objectCollision.alpha=0.5; // to jest player\n    // \t\t//console.log(objectCollision.key);\n    // \t\t//console.log(map);\n    // \t\t//console.log(map + \" | \" + map.getTile(65, 75, layer, true).index);\n    // \t}\n    // }, this);\n    // ta funkcja dziala tak ze player calkowicie pozbawiany jest blkowania przy tej kolizji\n    // map.setTileIndexCallback([109,110,111,112], function(objectCollision,mapElement){\n    //     if(objectCollision.key===\"dude\")\n    //     {\n    //         console.log(\"test collision\");\n    //     }\n    //     return false;\n    // }, this);\n\n    map.setCollisionByExclusion([101, 102, 205, 206, 207, 201, 202, 203, 301, 302, 303, 304, 305, 306, 401, 402, 403, 404, 405, 406, 407, 451, 452, 453, 454, 455, 456, 457, 459, 552, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 701, 702, 703, 704, 705, 706, 707, 708, 751, 752, 753, 754, 755, 756, 757, 758, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 851, 852, 853, 854, 855, 856, 901, 902, 903, 904, 905, 906, 209, 210, 211, 212, 259, 260, 261, 262, 309, 310, 311, 312, 1013, 1014, 1015]); //ladowanie background tla dla daenj mapy z jsona\n\n    if (proportiesMap[levelFile.activeIdLevel].backgroundColor) {\n      levelFile.backgroundColor = proportiesMap[levelFile.activeIdLevel].backgroundColor;\n    } else {\n      levelFile.backgroundColor = '#4488AA';\n    }\n\n    toolsGame.bgSet(levelFile.backgroundColor);\n\n    if (!proportiesMap[levelFile.activeIdLevel].background) {\n      levelFile.backgroundLevel = 'none';\n    } else // jesli jest to laduje obrazek\n      {\n        var credits = false;\n\n        if (Object.keys(game.cache._cacheMap[7]).length === levelFile.activeIdLevel) {\n          credits = true;\n        }\n\n        levelFile.backgroundLevel = proportiesMap[levelFile.activeIdLevel].background; // obrazek o rozmiarze 1600px specjalnie pod parallaxe...\n\n        bg = game.add.sprite(0, credits ? 0 : game.height - game.cache.getImage(levelFile.backgroundLevel).height, levelFile.backgroundLevel);\n        bg.width = game.cache.getImage(levelFile.backgroundLevel).width; //100*tileSize;\n\n        bg.height = game.cache.getImage(levelFile.backgroundLevel).height; //28.125*tileSize;\n\n        bg.fixedToCamera = credits ? false : true;\n\n        if (proportiesMap[levelFile.activeIdLevel].backgroundSecond) {\n          bg2 = game.add.sprite(0, game.height - game.cache.getImage(proportiesMap[levelFile.activeIdLevel].backgroundSecond).height, proportiesMap[levelFile.activeIdLevel].backgroundSecond);\n          bg2.width = game.cache.getImage(proportiesMap[levelFile.activeIdLevel].backgroundSecond).width;\n          bg2.height = game.cache.getImage(proportiesMap[levelFile.activeIdLevel].backgroundSecond).height;\n          bg2.fixedToCamera = true;\n        }\n\n        if (proportiesMap[levelFile.activeIdLevel].parallax) {\n          levelFile.backgroundParallax = true;\n        } else {\n          levelFile.backgroundParallax = false;\n        }\n      } //alert(map.width + ' x ' + map.height);\n\n\n    if (proportiesMap[levelFile.activeIdLevel].fog) {\n      var heightLessForGround = tileSize * 4; // default\n\n      var algoPosit = 25 / (tileSize / 10);\n      var moveY = proportiesMap[levelFile.activeIdLevel].fogPositionY ? proportiesMap[levelFile.activeIdLevel].fogPositionY : 0; // default 0\n\n      oFog = game.add.tileSprite(-(map.width * tileSize), (map.height - algoPosit) * tileSize - heightLessForGround - moveY, 2 * map.width * tileSize, algoPosit * tileSize, proportiesMap[levelFile.activeIdLevel].fog); //oFog.fixedToCamera = true;\n    }\n\n    if (proportiesMap[levelFile.activeIdLevel].positionGround) {\n      var positionGround = 6 * tileSize; // default\n\n      if (Number.isInteger(proportiesMap[levelFile.activeIdLevel].positionGround)) {\n        positionGround = proportiesMap[levelFile.activeIdLevel].positionGround;\n      }\n\n      ground = game.add.tileSprite(-(map.width * tileSize), map.height * tileSize - positionGround - 1, 2 * map.width * tileSize, map.height * tileSize, 'ground');\n    } //layer = map.createLayer('Tile Layer 1');\n    //console.log(map + \" | \" + map.getTile(65, 75, layer, true).index);\n    //  Un-comment this on to see the collision tiles\n    // layer.debug = true;\n    //layer.resizeWorld();\n    //console.log(game.world.width + \"x\" + game.world.height);\n\n\n    game.physics.arcade.gravity.y = 750;\n    cursors = game.input.keyboard.createCursorKeys();\n    jumpButton = game.input.keyboard.addKey(Phaser.Keyboard.UP);\n    fireButton = game.input.keyboard.addKey(Phaser.Keyboard.CONTROL); //ustawianie obiektow wg indexow mapy\n    //kolejnosc wyznacza z-index warstwy\n\n    toolsGame.mainElements.caves.obj = game.add.group();\n    toolsGame.mainElements.caves.obj.enableBody = true;\n    toolsGame.mainElements.building1s.obj = game.add.group();\n    toolsGame.mainElements.building1s.obj.enableBody = true;\n    toolsGame.mainElements.building2s.obj = game.add.group();\n    toolsGame.mainElements.building2s.obj.enableBody = true;\n    toolsGame.mainElements.building3s.obj = game.add.group();\n    toolsGame.mainElements.building3s.obj.enableBody = true;\n    toolsGame.mainElements.mines.obj = game.add.group();\n    toolsGame.mainElements.mines.obj.enableBody = true;\n    toolsGame.mainElements.cacti.obj = game.add.group();\n    toolsGame.mainElements.cacti.obj.enableBody = true;\n    toolsGame.mainElements.grassLeft.obj = game.add.group();\n    toolsGame.mainElements.grassLeft.obj.enableBody = true;\n    toolsGame.mainElements.grassRight.obj = game.add.group();\n    toolsGame.mainElements.grassRight.obj.enableBody = true;\n    toolsGame.mainElements.grassAnim.obj = game.add.group();\n    toolsGame.mainElements.grassAnim.obj.enableBody = true;\n    toolsGame.mainElements.keys.obj = game.add.group();\n    toolsGame.mainElements.keys.obj.enableBody = true;\n    toolsGame.mainElements.locks.obj = game.add.group();\n    toolsGame.mainElements.locks.obj.enableBody = true;\n    toolsGame.mainElements.doors.obj = game.add.group();\n    toolsGame.mainElements.doors.obj.enableBody = true;\n    toolsGame.mainElements.fire.fireUpS.obj = game.add.group();\n    toolsGame.mainElements.fire.fireUpS.obj.enableBody = true;\n    toolsGame.mainElements.fire.fireDownS.obj = game.add.group();\n    toolsGame.mainElements.fire.fireDownS.obj.enableBody = true;\n    toolsGame.mainElements.fire.fireLeftS.obj = game.add.group();\n    toolsGame.mainElements.fire.fireLeftS.obj.enableBody = true;\n    toolsGame.mainElements.fire.fireRightS.obj = game.add.group();\n    toolsGame.mainElements.fire.fireRightS.obj.enableBody = true;\n    toolsGame.mainElements.windmills.obj = game.add.group();\n    toolsGame.mainElements.windmills.obj.enableBody = true;\n    toolsGame.mainElements.windmillNewS.obj2 = game.add.group();\n    toolsGame.mainElements.windmillNewS.obj2.enableBody = true;\n    toolsGame.mainElements.windmillNewS.obj1 = game.add.group();\n    toolsGame.mainElements.windmillNewS.obj1.enableBody = true;\n    toolsGame.mainElements.bulletsGuns.obj = game.add.group();\n    toolsGame.mainElements.bulletsGuns.obj.enableBody = true;\n    toolsGame.mainElements.player.obj = false; //kolejnosc ladowania warstw\n\n    layerDeep = map.createLayer('levels-deep');\n    layerDeep.resizeWorld();\n    layerObject = map.createLayer('levels-objects');\n    layerObject.resizeWorld();\n    layer = map.createLayer('levels-main');\n    layer.resizeWorld(); //console.log(map.objects['just-objects']);\n\n    if (map.objects['just-objects']) {\n      map.objects['just-objects'].forEach(function (o) {\n        // generowanie animowanej trawy z lewej\n        if (o.gid === 461) {\n          toolsGame.mainElements.grassAnim.add(o.x / tileSize, o.y / tileSize);\n        } // generowanie animowanej trawy z prawej\n\n\n        if (o.gid === 462) {\n          toolsGame.mainElements.grassAnim.add(o.x / tileSize, o.y / tileSize, 'right');\n        }\n      });\n    }\n\n    for (var x = 0; x < map.width; x++) {\n      for (var y = 0; y < map.height; y++) {\n        //generowanie jaskini\n        if (map.getTile(x, y, layerObject, true).index == 1) {\n          toolsGame.mainElements.caves.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie building1\n\n\n        if (map.getTile(x, y, layerObject, true).index == 2) {\n          toolsGame.mainElements.building1s.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie building2\n\n\n        if (map.getTile(x, y, layerObject, true).index == 4) {\n          toolsGame.mainElements.building2s.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie building3\n\n\n        if (map.getTile(x, y, layerObject, true).index == 5) {\n          toolsGame.mainElements.building3s.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie mine\n\n\n        if (map.getTile(x, y, layerObject, true).index == 6) {\n          toolsGame.mainElements.mines.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie kaktusow\n\n\n        if (map.getTile(x, y, layerObject, true).index == 504) {\n          toolsGame.mainElements.cacti.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } // generowanie trawy z lewej\n\n\n        if (map.getTile(x, y, layerObject, true).index == 511) {\n          toolsGame.mainElements.grassLeft.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie trawy z prawej\n\n\n        if (map.getTile(x, y, layerObject, true).index == 512) {\n          toolsGame.mainElements.grassRight.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } // generowanie animowanej trawy z lewej\n\n\n        if (map.getTile(x, y, layerObject, true).index == 461) {\n          toolsGame.mainElements.grassAnim.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } // generowanie animowanej trawy z prawej\n\n\n        if (map.getTile(x, y, layerObject, true).index == 462) {\n          toolsGame.mainElements.grassAnim.add(x, y, 'right');\n          map.removeTile(x, y, layerObject);\n        } //generowanie klucza\n\n\n        if (map.getTile(x, y, layerObject, true).index == 515) {\n          toolsGame.mainElements.keys.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie drzwi\n\n\n        if (map.getTile(x, y, layerObject, true).index == 516) {\n          toolsGame.mainElements.doors.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie zamków/locks\n\n\n        if (map.getTile(x, y, layerObject, true).index == 517) //lewy\n          {\n            toolsGame.mainElements.locks.add(x, y);\n            map.removeTile(x, y, layerObject);\n          }\n\n        if (map.getTile(x, y, layerObject, true).index == 467) //prawy\n          {\n            toolsGame.mainElements.locks.add(x, y, true);\n            map.removeTile(x, y, layerObject);\n          } //generowanie ognia up\n\n\n        if (map.getTile(x, y, layerObject, true).index == 111) {\n          toolsGame.mainElements.fire.fireUpS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie ognia down\n\n\n        if (map.getTile(x, y, layerObject, true).index == 110) {\n          toolsGame.mainElements.fire.fireDownS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie ognia left\n\n\n        if (map.getTile(x, y, layerObject, true).index == 109) {\n          toolsGame.mainElements.fire.fireLeftS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie ognia right\n\n\n        if (map.getTile(x, y, layerObject, true).index == 112) {\n          toolsGame.mainElements.fire.fireRightS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie windmillNewS.add();\n\n\n        if (map.getTile(x, y, layerObject, true).index == 3) {\n          toolsGame.mainElements.windmillNewS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie inkubatora\n\n\n        if (map.getTile(x, y, layerObject, true).index === 552 || map.getTile(x, y, layerDeep, true).index === 552 || map.getTile(x, y, layer, true).index === 552) {\n          wspInkub.push(x * tileSize + \",\" + y * tileSize);\n        }\n      }\n    } // next z-index\n\n\n    toolsGame.mainElements.saveLevelS.obj = game.add.group();\n    toolsGame.mainElements.saveLevelS.obj.enableBody = true;\n    toolsGame.mainElements.endLevelS.obj = game.add.group();\n    toolsGame.mainElements.endLevelS.obj.enableBody = true;\n    toolsGame.mainElements.logs.obj = game.add.group();\n    toolsGame.mainElements.logs.obj.enableBody = true;\n    toolsGame.mainElements.Lifes.obj = game.add.group();\n    toolsGame.mainElements.Lifes.obj.enableBody = true;\n    toolsGame.mainElements.LifeSingleS.obj = game.add.group();\n    toolsGame.mainElements.LifeSingleS.obj.enableBody = true;\n    toolsGame.mainElements.coins.obj = game.add.group();\n    toolsGame.mainElements.coins.obj.enableBody = true;\n    toolsGame.mainElements.intruzi.obj = game.add.group();\n    toolsGame.mainElements.intruzi.obj.enableBody = true;\n    toolsGame.mainElements.kladki.poziom.obj = game.add.group();\n    toolsGame.mainElements.kladki.poziom.obj.enableBody = true;\n    toolsGame.mainElements.kladki.pionTopBack.obj = game.add.group();\n    toolsGame.mainElements.kladki.pionTopBack.obj.enableBody = true;\n    toolsGame.mainElements.kladki.pionBottomBack.obj = game.add.group();\n    toolsGame.mainElements.kladki.pionBottomBack.obj.enableBody = true;\n    toolsGame.mainElements.kladki.pionTop.obj = game.add.group();\n    toolsGame.mainElements.kladki.pionTop.obj.enableBody = true;\n    toolsGame.mainElements.kladki.pionBottom.obj = game.add.group();\n    toolsGame.mainElements.kladki.pionBottom.obj.enableBody = true; // next z-inedx\n\n    for (var x = 0; x < map.width; x++) {\n      for (var y = 0; y < map.height; y++) {\n        //generowanie zapisywania levelu\n        if (map.getTile(x, y, layerObject, true).index == 602) {\n          toolsGame.mainElements.saveLevelS.add(x, y, '->');\n          map.removeTile(x, y, layerObject);\n        }\n\n        if (map.getTile(x, y, layerObject, true).index == 603) {\n          toolsGame.mainElements.saveLevelS.add(x, y, '<-');\n          map.removeTile(x, y, layerObject);\n        } //generowanie konca levelu\n\n\n        if (map.getTile(x, y, layerObject, true).index == 601) {\n          toolsGame.mainElements.endLevelS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } // generating Life main\n\n\n        if (map.getTile(x, y, layerObject, true).index == 510) {\n          toolsGame.mainElements.Lifes.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } // generating Life single\n\n\n        if (map.getTile(x, y, layerObject, true).index == 460) {\n          toolsGame.mainElements.LifeSingleS.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie monet\n\n\n        if (map.getTile(x, y, layerObject, true).index == 502) {\n          toolsGame.mainElements.coins.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie animowanych klod\n\n\n        if (map.getTile(x, y, layerObject, true).index == 513) {\n          toolsGame.mainElements.logs.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie animowanych klod z niespodzianka\n\n\n        if (map.getTile(x, y, layerObject, true).index == 514) {\n          toolsGame.mainElements.logs.add(x, y, 'coin');\n          toolsGame.mainElements.logs.lengthBonusCoins++;\n          map.removeTile(x, y, layerObject);\n        }\n\n        if (map.getTile(x, y, layerObject, true).index == 464) {\n          toolsGame.mainElements.logs.add(x, y, 'surprise');\n          map.removeTile(x, y, layerObject);\n        } //generowanie nabojow\n\n\n        if (map.getTile(x, y, layerObject, true).index == 503) {\n          toolsGame.mainElements.bulletsGuns.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie intruzow typ 1\n\n\n        if (map.getTile(x, y, layerObject, true).index == 551) {\n          toolsGame.mainElements.intruzi.add(x, y, 1);\n          map.removeTile(x, y, layerObject);\n        } //generowanie intruzow typ 2\n\n\n        if (map.getTile(x, y, layerObject, true).index == 553) {\n          toolsGame.mainElements.intruzi.add(x, y, 2);\n          map.removeTile(x, y, layerObject);\n        } //generowanie intruzow typ 3\n\n\n        if (map.getTile(x, y, layerObject, true).index == 554) {\n          toolsGame.mainElements.intruzi.add(x, y, 3);\n          map.removeTile(x, y, layerObject);\n        } //generowanie intruzow typ 4 snake\n\n\n        if (map.getTile(x, y, layerObject, true).index == 555) {\n          toolsGame.mainElements.intruzi.add(x, y, 4);\n          map.removeTile(x, y, layerObject);\n        } //generowanie intruzow typ 5 bird\n\n\n        if (map.getTile(x, y, layerObject, true).index == 556) {\n          toolsGame.mainElements.intruzi.add(x, y, 5);\n          map.removeTile(x, y, layerObject);\n        } //generowanie kladki poziomej\n\n\n        if (map.getTile(x, y, layerObject, true).index == 505) {\n          toolsGame.mainElements.kladki.poziom.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie kladki pionowej top back\n\n\n        if (map.getTile(x, y, layerObject, true).index == 506) {\n          toolsGame.mainElements.kladki.pionTopBack.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie kladki pionowej bottom back\n\n\n        if (map.getTile(x, y, layerObject, true).index == 509) {\n          toolsGame.mainElements.kladki.pionBottomBack.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie kladki pionowej top\n\n\n        if (map.getTile(x, y, layerObject, true).index == 507) {\n          toolsGame.mainElements.kladki.pionTop.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie kladki pionowej bottom\n\n\n        if (map.getTile(x, y, layerObject, true).index == 508) {\n          toolsGame.mainElements.kladki.pionBottom.add(x, y);\n          map.removeTile(x, y, layerObject);\n        } //generowanie playera\n\n\n        if (map.getTile(x, y, layerObject, true).index == 501) {\n          //player moze byc tylko jeden wiec tylko raz jest genrowany\n          toolsGame.mainElements.player.add(x, y);\n          map.removeTile(x, y, layerObject);\n        }\n      }\n    } // next z-index\n\n\n    toolsGame.mainElements.firebs.obj = game.add.group();\n    toolsGame.mainElements.firebs.obj.enableBody = true; // woda ma miec wyzszy z-index od playera dlatego w tym miejscu\n\n    toolsGame.mainElements.waters.obj = game.add.group();\n    toolsGame.mainElements.waters.obj.enableBody = true; // dodanie spashy wody\n\n    toolsGame.mainElements.splashs.obj = game.add.group();\n    toolsGame.mainElements.splashs.obj.enableBody = true;\n\n    for (var x = 0; x < map.width; x++) {\n      for (var y = 0; y < map.height; y++) {\n        // generowanie ryb\n        if (map.getTile(x, y, layerObject, true).index == 520) {\n          toolsGame.mainElements.firebs.add(x, y, Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(1, 6));\n          map.removeTile(x, y, layerObject);\n        } // generowanie ognistej kuli\n\n\n        if (map.getTile(x, y, layerObject, true).index == 521) {\n          toolsGame.mainElements.firebs.add(x, y, Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(1, 6), true);\n          map.removeTile(x, y, layerObject);\n        } //generowanie wody\n\n\n        if (map.getTile(x, y, layerObject, true).index == 518) {\n          toolsGame.mainElements.waters.add(x, y);\n          map.removeTile(x, y, layerObject);\n        }\n\n        if (map.getTile(x, y, layerObject, true).index == 519) {\n          toolsGame.mainElements.waters.add(x, y, 'water-red');\n          map.removeTile(x, y, layerObject);\n        }\n      }\n    }\n\n    if (!toolsGame.mainElements.logs.lengthBonusCoins) toolsGame.mainElements.logs.lengthBonusCoins = 0;\n    oneHP = toolsGame.mainElements.coins.obj.children.length + toolsGame.mainElements.logs.lengthBonusCoins;\n    playGame.main = true; //console.log(game.world.width + \"x\" + game.world.height);\n\n    toolsGame.audio.bg.play(0.05, proportiesMap[levelFile.activeIdLevel].bgAudio);\n    game.load.start();\n  }, _this);\n  toolsGame.buttons.play.hide();\n  toolsGame.buttons.quit.hide();\n  toolsGame.buttons.mute.hide();\n}; // n* else next time\n\n\nvar create = function create() {\n  //console.log(\"test-create\");\n  // ladowanie tla dla menu i domyslnego dla mapy gry\n  unlockLevels = parseInt(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])(\"unlock-levels\")) > 1 ? Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])(\"unlock-levels\") : 1;\n  toolsGame.bgSet('#dfe4ff'); //toolsGame.bgSet('#000000');\n\n  bgMenu = game.add.image(0, 0, 'backgroundMenu');\n  bgMenu.fixedToCamera = true;\n  toolsGame.buttons.play.show();\n  toolsGame.buttons.quit.show();\n  toolsGame.buttons.mute.show(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('mute') ? 10 : 9);\n  toolsGame.text.show(false, game.width - 165, game.height - 25, .9, 'semDesign Game (' + (_varibles__WEBPACK_IMPORTED_MODULE_1__[\"detectionDevice\"] ? 'Android' : 'Browser') + ')', '400 12px Arial', '#000000', true, 'logoText');\n  toolsGame.buttons.openBoxMenu.show();\n  toolsGame.buttons.levels.show(); //console.log('mute: ' + (getCookies('mute')?true:false));\n\n  game.sound.mute = Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('mute') ? true : false; // fix for repeat onload\n\n  var onlyOneLoad = true;\n  game.load.onLoadComplete.add(function () {\n    if (onlyOneLoad) {\n      toolsGame.preloader.hide(); // theEndCredits = false;\n      // if(Object.keys(game.cache._cacheMap[7]).length === levelFile.activeIdLevel) {\n      //     theEndCredits = true;\n      // }\n\n      toolsGame.windows.boxTopMenu.f = false;\n\n      if (!theEndCredits) {\n        console.log(\"test load create\"); // x,y,nameSpriteOrImage,idName,opacitySpec,cameraFixed,scaleW,scaleH,frame,fade\n\n        toolsGame.image.show(toolsGame.windows.boxMenu.obj ? 0 : 0, toolsGame.windows.boxMenu.obj ? 0 : 0, 'boxTopMenu', 'boxTopMenu', .85, 1, false, false, false, true);\n        toolsGame.windows.boxTopMenu[\"const\"].show();\n        toolsGame.buttons.navigations.show();\n      } else {\n        //alert(\"s\");\n        toolsGame.mainElements.endLevelS.obj.alpha = 0;\n        toolsGame.mainElements.player.obj.body.gravity.y = -740;\n        toolsGame.mainElements.player.obj.body.bounce.y = 0;\n        levelFile.blockedKeys = true; //toolsGame.mainElements.player.obj.alpha=0;\n        // fix...\n\n        game.time.events.add(1, function () {\n          toolsGame.mainElements.player.obj.alpha = 0;\n        }, this);\n        game.camera.follow(toolsGame.mainElements.player.obj, Phaser.Camera.FOLLOW_LOCKON, 1, 1);\n      }\n\n      toolsGame.buttons.openBoxMenu.show('play-game');\n      onlyOneLoad = false;\n    }\n  }, _this); //fullscreen...\n  //game.input.onDown.add(gofull, this);\n  //window.graphics = graphics;\n}; // main loop the game\n\n\nvar update = function update() {\n  if (playGame.main) {\n    // spowolnia gre\n    // for(var x=0; x<map.width; x++) {\n    //     for (var y = 0; y < map.height; y++) {\n    //         if (map.getTile(x, y, layer, true).index==514)\n    //         {\n    //             if(toolsGame.mainElements.player.detectionHoldOnTile(x,y,1)){\n    //                 //console.log(\"wykrywa id 514\");\n    //                 //console.log(x + \"x\" + y);\n    //                 toolsGame.mainElements.logs.add(x,y,true);\n    //                 //toolsGame.mainElements.logs.lengthBonusCoins ++;\n    //                 map.removeTile(x, y, layer);\n    //             }\n    //         }\n    //     }\n    // }\n    // toolsGame.mainElements.logs.obj.forEach(function(log){\n    //     //console.log(log.x/tileSize + \"x\" + log.y/tileSize);\n    //     if(!toolsGame.mainElements.player.detectionHoldOnObject(log,1)){\n    //         map.getTile(log.x/tileSize, log.y/tileSize, layer, true).index=514;\n    //         log.destroy();\n    //     }\n    // }, this, true);\n    toolsGame.mainElements.windmillNewS.obj1.forEach(function (windmill) {\n      windmill.angle += 1;\n    }, _this, true); // dopracowac kolizje playera\n    //console.log('player: ');\n    //console.log(toolsGame.mainElements.player.obj.body);\n\n    toolsGame.mainElements.player.obj.body.offset.x = 8;\n    toolsGame.mainElements.player.obj.body.width = 32; //console.log(toolsGame.mainElements.player.obj.body);\n\n    if ((cursors.left.isDown || cursors.right.isDown || cursors.up.isDown) && !jumpKillF) {\n      jumpKillY = toolsGame.mainElements.player.obj.body.y;\n      jumpKillF = true;\n      toolsGame.mainElements.player.obj.body.bounce.y = 0.3;\n    } //console.log(map);\n    // position player\n    //console.log(toolsGame.mainElements.player.obj.body.y + ' + ' + toolsGame.mainElements.player.obj.height + ' = ' + map.height*map.tileHeight);\n    //console.log(\"x: \" + toolsGame.mainElements.player.obj.body.x + \" / \" + \"y: \" + toolsGame.mainElements.player.obj.body.y);\n    //generowanie animowanych klod z niespodzianka\n    // if (map.getTile(x, y, layer, true).index==514)\n    // {\n    //     toolsGame.mainElements.logs.add(x,y,true);\n    //     toolsGame.mainElements.logs.lengthBonusCoins ++;\n    //     map.removeTile(x, y, layer);\n    // }\n    // toolsGame.mainElements.windmillNewS.obj1.forEach(function(windmill){\n    //     windmill.angle += 1;\n    // }, this, true);\n    //console.log(map);\n    // player vs lay\n\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, layer, function (player, layer) {\n      if (layer.index === 51) {\n        //console.log(layer);\n        layer.collideDown = false;\n        layer.collideUp = false;\n        layer.collideLeft = false;\n        layer.collideRight = false;\n        game.time.events.add(1, function () {\n          layer.collideDown = true;\n          layer.collideUp = true;\n          layer.collideLeft = true;\n          layer.collideRight = true;\n        }, this);\n      }\n    }, null, _this); // ewentualnie usunavc jakby przyspieszylo gre, ale chyba to nci nie pomoze\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.gun.bullets.obj, layer, function (bullet, layer) {\n      if (layer.index === 51) {\n        //console.log(layer);\n        layer.collideDown = false;\n        layer.collideUp = false;\n        layer.collideLeft = false;\n        layer.collideRight = false;\n        game.time.events.add(1, function () {\n          layer.collideDown = true;\n          layer.collideUp = true;\n          layer.collideLeft = true;\n          layer.collideRight = true;\n        }, this);\n      }\n    }, null, _this); // game.physics.arcade.overlap(toolsGame.mainElements.kladki.pionTopBack.obj, layer, function(player, layer){\n    //     if(layer.index === 51) {\n    //         layer.collideDown=true;\n    //         layer.collideUp=true;\n    //         layer.collideLeft=true;\n    //         layer.collideRight=true;\n    //     }\n    // }, null, this);\n\n    toolsGame.mainElements.player.obj.t1 = false;\n    game.physics.arcade.collide(toolsGame.mainElements.player.obj, layer, function (player, layer) {\n      //console.log(player.body.checkCollision.down);\n      //console.log(player.body.blocked.right);\n      // player.t1=true;\n      // if(!player.onGround) {\n      //     toolsGame.audio.footStep();\n      //     player.onGround=true;\n      // }\n      //\n      // if(cursors.left.isDown || cursors.right.isDown) {\n      //     toolsGame.audio.footStep();\n      // }\n      toolsGame.mainElements.player.checkIfWasKilledAndOther(player);\n\n      if (player.killHitIntruder) {\n        player.killHitIntruder = false;\n      } // wchodzenie pod gorke\n\n\n      if ((cursors.right.isDown || cursors.left.isDown) && (player.body.blocked.right || player.body.blocked.left) && !jumpButton.isDown && player.body.onFloor()) {\n        //console.log(\"up\");\n        player.body.velocity.y = -12 * tileSize;\n      } //console.log(\"x: \" + player.body.x + \" / \" + \"y: \" + player.body.y);\n\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.coins.obj, layer);\n    game.physics.arcade.collide(toolsGame.mainElements.logs.obj, layer); // game.physics.arcade.overlap(toolsGame.mainElements.player.gun.bullets.obj, toolsGame.mainElements.intruzi.obj, function(bullet, intruz){\n    //     //jden strzal wywoluje jedna funkcje...\n    //     if(!intruz.killing) toolsGame.mainElements.intruzi.collisionIntruz(intruz,\"total-kill\");\n    //     intruz.killing=true;\n    //     bullet.kill();\n    // }, null, this);\n    ///\\\\\\///\n    // game.physics.arcade.overlap(toolsGame.mainElements.logs.obj, toolsGame.mainElements.player.obj, function(log,p){\n    //     p.isUp=false;\n    // },null, this);\n    // dopracowac - to musi byc aby intruzi mogli przemieszcac sie p ktych kladkach\n\n    game.physics.arcade.collide(toolsGame.mainElements.logs.obj, toolsGame.mainElements.intruzi.obj, function (l, i) {\n      // nie wykrywa blokowania dla intruza\n      // console.log(\"intruz:\");\n      // console.log(i.body);\n      // console.log(\"log:\");\n      // console.log(l.body);\n      //console.log(l.body);\n      toolsGame.mainElements.intruzi.collisionBack(i);\n    }, null, _this); //\n    // game.physics.arcade.overlap(toolsGame.mainElements.logs.obj,toolsGame.mainElements.intruzi.obj,function(l,i){\n    //     //console.log(i.body.blocked);\n    // }, null, this);\n\n    game.physics.arcade.collide(toolsGame.mainElements.logs.obj, toolsGame.mainElements.logs.obj, function (log) {// dla logs tez dziala\n      //toolsGame.intruzCollisonBack(log);\n    });\n    game.physics.arcade.collide(toolsGame.mainElements.logs.obj, toolsGame.mainElements.player.obj, function (log, p) {\n      // p.body.allowGravity = true;\n      //console.log(p);\n      if (toolsGame.mainElements.player.obj.body.overlapY > 0) {\n        toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n        p.isUp = true;\n        toolsGame.mainElements.player.obj.body.allowGravity = true; //toolsGame.mainElements.player.obj.body.bounce.y = 0;\n\n        toolsGame.mainElements.player.obj.body.allowGravity = false;\n        game.time.events.add(300, function () {\n          p.isUp = false;\n        }, this);\n      } else {\n        if (!p.onlynOne) {\n          //p.body.allowGravity = true;\n          p.body.velocity.y = -330;\n\n          if (facing === 'left') {\n            p.body.velocity.x = -130;\n          } else if (facing === 'right') {\n            p.body.velocity.x = 130;\n          }\n\n          toolsGame.audio.breakGround();\n          game.time.events.add(50, function () {\n            p.body.allowGravity = true;\n            p.body.checkCollision.down = false;\n          }, this);\n          game.time.events.add(300, function () {\n            p.animations.play('run', 20, false);\n          }, this); // jesli id = 514 to dostajemy bonusowe zloto\n\n          if (p.coin) {\n            game.time.events.add(200, function () {\n              toolsGame.mainElements.coins.add(p.x / tileSize, p.y / tileSize);\n            }, this);\n          } else if (p.surprise) {\n            game.time.events.add(200, function () {\n              //console.log(p.surprise);\n              switch (p.surprise) {\n                case 1:\n                  toolsGame.mainElements.bulletsGuns.add(p.x / tileSize, p.y / tileSize);\n                  break;\n\n                case 2:\n                  toolsGame.mainElements.LifeSingleS.add(p.x / tileSize, p.y / tileSize);\n                  break;\n\n                case 3:\n                  toolsGame.mainElements.intruzi.add(p.x / tileSize, p.y / tileSize, 3);\n                  break;\n\n                case 4:\n                  toolsGame.mainElements.coins.add(p.x / tileSize, p.y / tileSize);\n                  break;\n\n                case 5:\n                  toolsGame.mainElements.intruzi.add(p.x / tileSize, p.y / tileSize, 5);\n                  break;\n              }\n            }, this);\n          }\n\n          game.time.events.add(900, function () {\n            // toolsGame.mainElements.coins.add(p.saveX/tileSize, p.saveY/tileSize);\n            p.kill();\n          }, this);\n          p.onlynOne = true;\n        }\n      }\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.Lifes.obj, layer);\n    game.physics.arcade.collide(toolsGame.mainElements.player.gun.bullets.obj, layer);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.gun.bullets.obj, toolsGame.mainElements.intruzi.obj, function (bullet, intruz) {\n      //jden strzal wywoluje jedna funkcje...\n      if (intruz.type === 4 || intruz.type === 5) {\n        if (!intruz.killing) {\n          toolsGame.mainElements.intruzi.collisionIntruz(intruz, \"total-kill\");\n        }\n\n        intruz.killing = true;\n      } else {\n        toolsGame.audio.scream(); //console.log(intruz.body.velocity.x);\n        // evry shot makes intruz jump\n\n        intruz.deactiveVelocity = bullet.direction;\n\n        if (!intruz.firstShoot) {\n          intruz.firstShoot = 1; // blood\n\n          game.time.events.add(50, function () {\n            toolsGame.mainElements.splashs.add(intruz.body.position.x / tileSize, bullet.body.position.y / tileSize, 'splash-water-red', 'blood');\n          }, this);\n          intruz.randomSpeed = intruz.randomSpeed / 2;\n          game.time.events.add(50, function () {\n            if (intruz.randomMove === 'intruzRight') {\n              intruz.randomMove = 'intruzIdleLeft';\n            } else {\n              intruz.randomMove = 'intruzIdleRight';\n            }\n          }, this);\n          game.time.events.add(600, function () {\n            if (intruz.randomMove === 'intruzIdleLeft') {\n              intruz.randomMove = 'intruzRight';\n            } else {\n              intruz.randomMove = 'intruzLeft';\n            }\n\n            intruz.deactiveVelocity = false;\n          }, this);\n        } else {\n          intruz.randomMove = 'intruzLeft';\n\n          if (!intruz.killing) {\n            toolsGame.mainElements.intruzi.collisionIntruz(intruz, \"total-kill\");\n            intruz.killing = true;\n          }\n        }\n      }\n\n      bullet.kill();\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.gun.bullets.obj, layer, function (bullet, layer) {\n      if (bullet.body.blocked.right || bullet.body.blocked.left) {\n        bullet.kill();\n      }\n    }, null, _this);\n\n    if (toolsGame.mainElements.player.obj.gForceWater) {\n      toolsGame.mainElements.player.obj.body.gravity.y = 0;\n      toolsGame.mainElements.player.obj.gForceWater = false;\n    }\n\n    toolsGame.mainElements.firebs.obj.forEach(function (f) {\n      //console.log(toolsGame.mainElements.player.obj.position.x);\n      //console.log(f.position.x);\n      //console.log(game.width);\n      if (!f.startPositionSaveY) {\n        f.startPositionSaveY = Math.ceil(f.body.position.y / tileSize);\n      }\n\n      f.currentPositionY = Math.ceil(f.body.position.y / tileSize); //console.log(f.startPositionSaveY - f.currentPositionY);\n      //if(timerTotal == f.randomStart) {\n\n      if (timerTotal == 0) {\n        f.start = true;\n      } // detection activate firebs\n\n\n      if (toolsGame.mainElements.player.detectionHoldOnObject(f, 2)) {\n        f.active = true;\n\n        if (f.activeWait) {\n          // setTime to Phaser\n          game.time.events.add(Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(0, 3) * 1000, function () {\n            f.fall = false;\n            f.alpha = 1;\n          }, this); // setTimeout(function(){\n          //     f.fall=false;\n          //     f.alpha=1;\n          // },randomBetween(0,3)*1000);\n\n          f.activeWait = false;\n        }\n      } else {\n        f.active = false;\n      }\n\n      if (f.start) {\n        if (!f.fall) {\n          if (f.startPositionSaveY - f.currentPositionY === 0) {\n            // unosi sie\n            if (!f.typeFire) {\n              f.animations.play('run1', 10, true);\n            }\n\n            f.alpha = 1;\n            f.body.allowGravity = false;\n            f.body.velocity.y = -600;\n          } else if (f.startPositionSaveY - f.currentPositionY === 4) {\n            f.body.allowGravity = true;\n          } else if (f.startPositionSaveY - f.currentPositionY === 16) {\n            // opada\n            if (!f.typeFire) {\n              f.animations.play('run2', 10, true);\n            }\n\n            f.body.allowGravity = true;\n            f.body.velocity.y = 0;\n            f.fall = true;\n            f.t = false;\n          }\n        } else {\n          if (f.startPositionSaveY - f.currentPositionY === 0 && !f.t) {\n            // zatrzymuje sie\n            f.body.velocity.y = 0;\n            f.body.allowGravity = false;\n            f.t = true;\n            f.alpha = 0; // detection activate firebs\n\n            game.time.events.add(Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(1, 6) * 1000, function () {\n              if (f.active) {\n                f.fall = false;\n                f.alpha = 1;\n              } else {\n                f.activeWait = true;\n              } //console.log(\"aktywuj ponownie\");\n\n            }, this); // setTimeout(function(){\n            //     if(f.active) {\n            //         f.fall=false;\n            //         f.alpha=1;\n            //     } else {\n            //         f.activeWait=true;\n            //     }\n            //     //console.log(\"aktywuj ponownie\");\n            // },randomBetween(1,6)*1000);\n          }\n        }\n      }\n    }, _this, true);\n    game.physics.arcade.overlap(toolsGame.mainElements.firebs.obj, toolsGame.mainElements.waters.obj, function (f, w) {\n      //console.log(f.randomStart);\n      // clearTimeout(f.gForceWaterTimer);\n      // f.gForceWaterTimer = setTimeout(function(){\n      //     f.gForceWaterOnlyeOne = false;\n      // },100);\n      game.time.events.remove(f.gForceWaterTimer);\n      f.gForceWaterTimer = game.time.events.add(100, function () {\n        f.gForceWaterOnlyeOne = false;\n      }, this);\n\n      if (!f.gForceWaterOnlyeOne) {\n        toolsGame.mainElements.splashs.add((f.body.position.x + f.body.width / 2) / tileSize, (f.body.position.y + (f.typeFire ? -16 : 8)) / tileSize, w.type === 'water-red' ? 'splash-water-red' : false);\n        f.gForceWaterOnlyeOne = true;\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.firebs.obj, function (p, f) {\n      if (f.alpha === 1) {\n        //console.log(\"collision with player\");\n        toolsGame.mainElements.player.lostLife(p);\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.waters.obj, function (p, w) {\n      p.body.gravity.y = -525; // clearTimeout(p.gForceWaterTimer);\n      // p.gForceWaterTimer = setTimeout(function(){\n      //     p.gForceWaterOnlyeOne = false;\n      // },100);\n\n      game.time.events.remove(p.gForceWaterTimer);\n      p.gForceWaterTimer = game.time.events.add(100, function () {\n        p.gForceWaterOnlyeOne = false;\n      }, this);\n\n      if (w.type !== \"water-red\") {\n        //console.log(\"p: \" + p.body.position.x);\n        // clearTimeout(p.waterYSaveTime);\n        // p.waterYSaveTime = setTimeout(function () {\n        //     p.waterYSave = false;\n        // },300);\n        game.time.events.remove(p.waterYSaveTime);\n        p.waterYSaveTime = game.time.events.add(300, function () {\n          p.waterYSave = false;\n        }, this);\n\n        if (!p.waterYSave) {\n          p.waterYSave = Math.ceil(w.body.position.y / tileSize);\n        } //console.log(p.waterYSave - Math.ceil(p.body.position.y/tileSize));\n\n\n        if (p.waterYSave - Math.ceil(p.body.position.y / tileSize) < 2) {\n          if (!p.iterWater) {\n            p.iterWater = 1;\n          }\n\n          p.iterWater++; //console.log(w.type);\n\n          if (p.iterWater >= 250) {\n            //console.log(\"kill\");\n            toolsGame.mainElements.player.lostLife(p);\n            p.iterWater = false;\n          }\n        } else {\n          p.iterWater = false;\n        }\n      } else {\n        //console.log(\"kill\");\n        toolsGame.mainElements.player.lostLife(p, 10); //\n      } //console.log(p.animations.currentAnim.name);\n\n\n      if (!p.gForceWaterOnlyeOne) {\n        //console.log(p.body.position.x + \" - \" + p.body.position.y);\n        //console.log(p.body);\n        //console.log(p.animations.currentAnim.name);\n        var typeSplash = false; // toolsGame.audio.splash();\n\n        if (w.type === 'water-red') {\n          typeSplash = 'splash-water-red';\n        }\n\n        if (p.animations.currentAnim.name === \"left\" || p.animations.currentAnim.name === \"jump-left\") {\n          toolsGame.mainElements.splashs.add((p.body.position.x + p.body.width / 2) / tileSize - 32 / tileSize, (p.body.position.y + 32) / tileSize, typeSplash);\n        } else if (p.animations.currentAnim.name === \"right\" || p.animations.currentAnim.name === \"jump-right\") {\n          toolsGame.mainElements.splashs.add((p.body.position.x + p.body.width / 2) / tileSize + 32 / tileSize, (p.body.position.y + 32) / tileSize, typeSplash);\n        } else {\n          toolsGame.mainElements.splashs.add((p.body.position.x + p.body.width / 2) / tileSize, (p.body.position.y + 28) / tileSize, typeSplash);\n        }\n\n        p.gForceWaterOnlyeOne = true;\n      }\n\n      p.gForceWater = true;\n\n      if (cursors.left.isDown || cursors.right.isDown) {\n        if (!p.delayWater) {\n          p.gForceWaterOnlyeOne = false;\n          p.delayWater = true;\n        }\n\n        if (timeLoop % 15 == 0) {\n          p.delayWater = false;\n        }\n      }\n    }, null, _this);\n    toolsGame.mainElements.waters.obj.forEach(function (w) {\n      if (toolsGame.mainElements.player.detectionHoldOnObject(w, 1)) {\n        //console.log(w.alpha);\n        if (!w.alpha) {\n          w.alpha = 0.7;\n        } //console.log(\"ładowANIE WOdy\");\n\n      } else {\n        if (w.alpha) {\n          w.alpha = 0;\n        }\n      }\n    }, _this, true);\n    toolsGame.mainElements.intruzi.obj.forEach(function (intruz) {\n      if (intruz.gForceWater) {\n        intruz.body.gravity.y = 0;\n        intruz.gForceWater = false;\n      }\n\n      if (intruz.type === 4) {\n        intruz.body.offset.y = 6;\n        intruz.body.height = 26;\n      } else if (intruz.type === 5) {\n        // intruz.body.velocity.y = -intruz.randomSpeed/2;\n        intruz.body.offset.y = 16;\n        intruz.body.height = 52;\n\n        if (!intruz.jumpToFly) {\n          if (timeLoop >= 0 && timeLoop < 60) {\n            intruz.body.velocity.y = -50;\n          } else {\n            intruz.body.velocity.y = 25;\n          }\n        } //console.log(timeLoop);\n        // intruz.timeFly = game.time.events.add(2000, function () {\n        //     game.time.events.remove(intruz.timeFly);\n        //     intruz.body.velocity.y = -50;\n        //\n        // },this);\n\n      } // warunek jesli intruz dotyka dna mapy\n\n\n      if (intruz.body.y + intruz.height === map.height * map.tileHeight) {\n        if (!intruz.killing) toolsGame.mainElements.intruzi.collisionIntruz(intruz, \"total-kill\");\n        intruz.killing = true;\n      }\n    }, _this, true);\n    game.physics.arcade.overlap(toolsGame.mainElements.intruzi.obj, toolsGame.mainElements.waters.obj, function (i, w) {\n      if (i.active) {\n        i.body.gravity.y = -525; // clearTimeout(i.gForceWaterTimer);\n        // i.gForceWaterTimer = setTimeout(function(){\n        //     i.gForceWaterOnlyeOne = false;\n        // },100);\n\n        game.time.events.remove(i.gForceWaterTimer);\n        i.gForceWaterTimer = game.time.events.add(100, function () {\n          i.gForceWaterOnlyeOne = false;\n        }, this);\n\n        if (!i.gForceWaterOnlyeOne) {\n          //console.log(i.body.position.x + \" - \" + i.body.position.y);\n          //console.log(i.body);\n          if (i.type === 4) {\n            i.move_y = -33 / tileSize;\n          } else {\n            i.move_y = 0;\n          }\n\n          var typeSplash = false;\n\n          if (w.type === 'water-red') {\n            if (!i.killed) {\n              toolsGame.mainElements.intruzi.collisionIntruz(i, \"total-kill\");\n              i.killed = true;\n            }\n\n            typeSplash = 'splash-water-red';\n          }\n\n          if (i.animations.currentAnim.name === \"left\") {\n            toolsGame.mainElements.splashs.add((i.body.position.x + i.body.width / 2) / tileSize - 32 / tileSize, i.move_y + (i.body.position.y + 32) / tileSize, typeSplash);\n          } else if (i.animations.currentAnim.name === \"right\") {\n            toolsGame.mainElements.splashs.add((i.body.position.x + i.body.width / 2) / tileSize + 32 / tileSize, i.move_y + (i.body.position.y + 32) / tileSize, typeSplash);\n          } else {\n            toolsGame.mainElements.splashs.add((i.body.position.x + i.body.width / 2) / tileSize, i.move_y + (i.body.position.y + 28) / tileSize, typeSplash);\n          } //toolsGame.mainElements.splashs.add((i.body.position.x+(i.body.width/2))/tileSize,((i.body.position.y+28)/tileSize));\n\n\n          i.gForceWaterOnlyeOne = true;\n        }\n\n        i.gForceWater = true; //console.log(i.animations.currentAnim.name);\n\n        if (i.animations.currentAnim.name == 'right' || i.animations.currentAnim.name == 'left') {\n          if (!i.delayWater) {\n            i.gForceWaterOnlyeOne = false;\n            i.delayWater = true;\n          }\n\n          if (timeLoop % 15 == 0) {\n            i.delayWater = false;\n          }\n        }\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.coins.obj, function (player, coin) {\n      toolsGame.audio.coin();\n      toolsGame.mainElements.player.numberCoins++;\n      toolsGame.mainElements.player.numberCoinsLevel++;\n      toolsGame.mainElements.player.numberCoinsLevelProcent = Math.ceil(100 * toolsGame.mainElements.player.numberCoinsLevel / oneHP); //console.log(\"100*\" + toolsGame.mainElements.player.numberCoinsLevel + \" / \" + oneHP);\n\n      coin.kill();\n      toolsGame.windows.boxTopMenu.f = false; //console.log(player.x);\n      //toolsGame.mainElements.coins.add(player.x/tileSize, player.y/tileSize);\n      // only animation text\n\n      toolsGame.addPoint(coin.x, player.y, 'addPointGold' + toolsGame.mainElements.player.numberCoins, '+1 gold');\n    }, null, _this); // game.physics.arcade.overlap(toolsGame.mainElements.intruzi.obj, toolsGame.mainElements.coins.obj, function(player, coin){\n    //     coin.kill();\n    // }, null, this);\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.Lifes.obj, function (player, Life) {\n      toolsGame.mainElements.player.numberMainLifes++;\n      toolsGame.audio.life();\n      player.body.velocity.y = -300;\n      player.scale.setTo(1, playerScaleBig);\n      toolsGame.mainElements.player.scale(); //player.moreJump = true;\n      // setTimeout(function(){\n      //     toolsGame.audio.life();\n      //     setTimeout(function(){\n      //         toolsGame.audio.life();\n      //     },200);\n      // },200);\n\n      game.time.events.add(200, function () {\n        toolsGame.audio.life();\n        game.time.events.add(200, function () {\n          toolsGame.audio.life();\n        }, this);\n      }, this);\n      Life.kill();\n      toolsGame.windows.boxTopMenu.f = false;\n      toolsGame.addPoint(Life.x, player.y, 'addPointFullLife' + toolsGame.mainElements.player.numberMainLifes, '+1 full life');\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.LifeSingleS.obj, function (player, LifeSingle) {\n      if (toolsGame.mainElements.player.numberLifes === amountLife) {// toolsGame.mainElements.player.numberMainLifes++;\n      } else {\n        toolsGame.mainElements.player.numberLifes++;\n        toolsGame.audio.life();\n        LifeSingle.kill();\n        toolsGame.windows.boxTopMenu.f = false;\n        toolsGame.addPoint(LifeSingle.x, player.y, 'addPointLife' + toolsGame.mainElements.player.numberLifes, '+1 life');\n      }\n    }, null, _this); /////\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.bulletsGuns.obj, function (player, bullets_gun) {\n      var numberAddBullets = 6;\n      toolsGame.audio.bullets();\n      toolsGame.mainElements.player.countBullets += numberAddBullets;\n      toolsGame.mainElements.player.countBulletsF = true;\n      bullets_gun.kill();\n      toolsGame.windows.boxTopMenu.f = false;\n      toolsGame.addPoint(bullets_gun.x, player.y, 'addPointBullet' + toolsGame.mainElements.player.countBullets, '+' + numberAddBullets + ' bullets');\n    }, null, _this); //// Finishing the level\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.endLevelS.obj, function (player, end_level) {\n      if (!levelFile.readyLoad) {\n        toolsGame.audio.nextLevel(); // saving to cookies\n\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('id-level-last-memory', levelFile.activeIdLevel);\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('coins', toolsGame.mainElements.player.numberCoins);\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('coins-' + levelFile.activeIdLevel, toolsGame.mainElements.player.numberCoinsLevel); //console.log(toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory + \" - \" + toolsGame.mainElements.player.numberCoinsLevelProcent);\n\n        if (toolsGame.mainElements.player.numberCoinsLevelProcent > toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory) {\n          Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('coins-procent-' + levelFile.activeIdLevel, toolsGame.mainElements.player.numberCoinsLevelProcent); //console.log(\"save\");\n        }\n\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('Lifes', toolsGame.mainElements.player.numberLifes);\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('main-Lifes', toolsGame.mainElements.player.numberMainLifes);\n        Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('bullets', toolsGame.mainElements.player.countBullets); // poprawic\n        //alert(\"x\");\n        //clearTimeout(toolsGame.mainElements.player.obj.touchGroundTime);\n        //toolsGame.mainElements.player.obj.animations.stop();\n\n        levelFile.readyLoad = true;\n        levelFile.blockedKeys = true; //console.log(toolsGame.mainElements.player.obj.position.y);\n        //toolsGame.mainElements.player.obj.position.y = toolsGame.mainElements.player.obj.position.y - 50;\n        //console.log(amountLevels + \" - \" + levelFile.activeIdLevel);\n\n        var finishLevel = function finishLevel() {\n          toolsGame.text.hide('score');\n          toolsGame.text.hide('scoreTotal');\n          correctCookiesProcent();\n          levelFile.activeIdLevel = levelFile.activeIdLevel + 1; //alert(Object.keys(game.cache._cacheMap[7]).length + \" - \" + amountLevels + \" - \" + levelFile.activeIdLevel);\n\n          if (amountLevels === levelFile.activeIdLevel - 1) {\n            toolsGame.windows.boxMenu.show('game-complete');\n          } else {\n            //alert(id);\n            endGame();\n            levelFile.name = 'level' + levelFile.activeIdLevel; //console.log(getCookies(\"unlock-levels\") + \" - \" + levelFile.activeIdLevel);\n\n            if (!Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])(\"unlock-levels\") || Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])(\"unlock-levels\") < levelFile.activeIdLevel) {\n              unlockLevels = levelFile.activeIdLevel;\n              Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('unlock-levels', unlockLevels); //alert(\"unlockLevels zapisane: \" + unlockLevels);\n            } //alert(amountLevels + \" - \" + levelFile.activeIdLevel);\n            // if(amountLevels === levelFile.activeIdLevel) {\n            //     alert(\"congratulations!\");\n            // }\n\n\n            startGame(false, amountLevels === levelFile.activeIdLevel, scorePercent); // levelFile.readyLoad=false;\n            // levelFile.blockedKeys=false;\n          }\n        };\n\n        if (!theEndCredits) {\n          toolsGame.mainElements.player.obj.animations.play('end-level');\n          game.time.events.add(3000, function () {\n            toolsGame.mainElements.player.obj.animations.play('idle-left');\n          }, this);\n          toolsGame.mainElements.player.obj.body.bounce.y = .9; // jump for finish level\n\n          toolsGame.mainElements.player.obj.body.velocity.y = -330;\n          toolsGame.mainElements.player.jumpTimer = game.time.now + 330; // Percent presentation\n\n          var scorePercent = 0,\n              theBestScorePrecent = toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory,\n              showTheBestScore = '';\n\n          var scoreInterval = function scoreInterval() {\n            toolsGame.text.show('center', 0, 0, 0.9, 'Score: ' + scorePercent + '%', 'bold 20px Arial', '#dad9d5', true, 'score', true);\n            toolsGame.audio.ticScore();\n\n            if (scorePercent < toolsGame.mainElements.player.numberCoinsLevelProcent) {\n              scorePercent++;\n              game.time.events.add(100, scoreInterval, this);\n            } else {\n              toolsGame.audio.quake();\n              game.camera.shake(0.05, 500, true, Phaser.Camera.SHAKE_VERTICAL);\n\n              if (theBestScorePrecent > scorePercent) {\n                showTheBestScore = \"\\n\" + 'Your the best score: ' + theBestScorePrecent + '%';\n              } else {\n                if (scorePercent) {\n                  showTheBestScore = \"\\n\" + 'This is your best score!';\n                }\n              } //console.log(amountLevels + \" - \" + levelFile.activeIdLevel);\n\n\n              if (amountLevels === levelFile.activeIdLevel + 1) {\n                game.time.events.add(1000, function () {\n                  //console.log(amountLevels);\n                  var globalPercent = 0;\n\n                  for (var i = 1; i < amountLevels; i++) {\n                    if (Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-' + i)) {\n                      globalPercent += parseInt(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-' + i)); //console.log(i + ' istnieje i wynosci: ' + getCookies('coins-procent-' + i) + '%');\n                    }\n                  }\n\n                  globalPercent = Math.ceil(globalPercent / (amountLevels - 1));\n                  var scoreTotalPercent = 0;\n\n                  var scoreTotalIntreval = function scoreTotalIntreval() {\n                    if (scoreTotalPercent < globalPercent) {\n                      scoreTotalPercent++;\n                      game.time.events.add(100, scoreTotalIntreval, this);\n                    } else {\n                      toolsGame.audio.quake(.6);\n                      game.camera.shake(0.08, 600, true, Phaser.Camera.SHAKE_VERTICAL);\n                      game.time.events.add(4000, finishLevel, this);\n                    }\n\n                    toolsGame.text.hide('scoreTotal');\n                    toolsGame.text.show('center', 0, 3 * tileSize, 0.9, 'Score Total: ' + scoreTotalPercent + '%', 'bold 32px Arial', '#dad9d5', true, 'scoreTotal', true);\n                    toolsGame.audio.ticScore();\n                  };\n\n                  scoreTotalIntreval();\n                }, this);\n              } else {\n                game.time.events.add(4000, finishLevel, this);\n              }\n            }\n\n            toolsGame.text.hide('score');\n            toolsGame.text.show('center', 0, 0, 0.9, 'Score: ' + scorePercent + '%' + showTheBestScore, 'bold 20px Arial', '#dad9d5', true, 'score', true);\n          }; //scoreInterval();\n\n\n          game.time.events.add(3000, scoreInterval, this);\n        } else {\n          game.time.events.add(3000, finishLevel, this);\n        } // animation jump left/right for finish level\n\n\n        var start = null;\n\n        var step = function step(timestamp) {\n          if (!start) start = timestamp;\n\n          if (facing === 'right') {\n            toolsGame.mainElements.player.obj.body.velocity.x = 100;\n          } else if (facing === 'left') {\n            toolsGame.mainElements.player.obj.body.velocity.x = -100;\n          }\n\n          var progress = timestamp - start;\n\n          if (progress < 500) {\n            window.requestAnimationFrame(step);\n          }\n        };\n\n        window.requestAnimationFrame(step);\n      }\n\n      toolsGame.windows.boxTopMenu.f = false;\n    }, null, _this); //// Save the place\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.saveLevelS.obj, function (player, save_level) {\n      //console.log(player);\n      if (!(saveX === save_level.body.x && saveY === save_level.body.y) && !save_level.block) {\n        //console.log(\"Save place: \" + save_level.body.x + \" / \" + save_level.body.y);\n        saveX = save_level.body.x;\n        saveY = save_level.body.y;\n        save_level.block = true;\n        save_level.animations.play('run2', 17, true);\n        toolsGame.audio.flash(1);\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.keys.obj, function (p, k) {\n      k.kill();\n      keys = 1;\n      toolsGame.audio.key(.8);\n      toolsGame.windows.boxTopMenu.f = false;\n      toolsGame.addPoint(k.x, p.y, 'addPointKey', 'You got the key!');\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.locks.obj, function (p, l) {\n      if (keys === 1) {\n        //l.alpha = 0;\n        l.kill();\n        toolsGame.audio.doorLift();\n        toolsGame.mainElements.doors.obj.children[0].body.velocity.y = -50; // setTimeout(function () {\n        //     toolsGame.mainElements.doors.obj.children[0].body.velocity.y = 0;\n        // },3000);\n\n        game.time.events.add(3000, function () {\n          toolsGame.mainElements.doors.obj.children[0].body.velocity.y = 0;\n        }, this);\n        toolsGame.windows.boxTopMenu.f = false;\n        keys = 0;\n      }\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.player.obj, toolsGame.mainElements.doors.obj, function (p, k) {});\n    game.physics.arcade.collide(toolsGame.mainElements.intruzi.obj, toolsGame.mainElements.doors.obj, function (i, d) {\n      toolsGame.mainElements.intruzi.collisionBack(i);\n    }); // dotatkowy warunek jesli player dotyka dna mapy\n\n    if (toolsGame.mainElements.player.obj.body.y + toolsGame.mainElements.player.obj.height === map.height * map.tileHeight) {\n      //toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n      toolsGame.mainElements.player.lostLife(toolsGame.mainElements.player.obj, 3);\n    } //player vs fire\n\n\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.fire.fireUpS.obj, function (player, fire) {\n      toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n      toolsGame.mainElements.player.lostLife(player);\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.fire.fireDownS.obj, function (player, fire) {\n      toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n      toolsGame.mainElements.player.lostLife(player);\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.fire.fireLeftS.obj, function (player, fire) {\n      toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n      toolsGame.mainElements.player.lostLife(player);\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.fire.fireRightS.obj, function (player, fire) {\n      toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n      toolsGame.mainElements.player.lostLife(player);\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.intruzi.obj, layer); // player vs intruder\n\n    if (!levelFile.blockedKeys) {\n      game.physics.arcade.overlap(toolsGame.mainElements.player.obj, toolsGame.mainElements.intruzi.obj, function (player, intruz) {\n        if (!intruz.killing) {\n          if (player.body.overlapY > 0) {\n            toolsGame.mainElements.player.checkIfWasKilledAndOther(player);\n\n            if (intruz.type === 4) {\n              toolsGame.audio.breakBones();\n            } else if (intruz.type === 5) {\n              toolsGame.audio.condor();\n            } else {\n              toolsGame.audio.scream();\n            }\n\n            toolsGame.mainElements.intruzi.collisionIntruz(intruz);\n\n            if (intruz.type !== 5) {\n              if (!intruz.hit || !player.killHitIntruder) {\n                player.killHitIntruder = true;\n                intruz.hit = 1;\n              }\n\n              if (intruz.hit > 4) {\n                if (!intruz.killing) toolsGame.mainElements.intruzi.collisionIntruz(intruz, \"total-kill\");\n                intruz.killing = true;\n                intruz.hit = false;\n              } else {\n                intruz.hit++;\n              }\n            }\n          } // tracenie zycia\n          //if(player.body.overlapX>0 || player.body.overlapX<0)\n\n\n          if (player.body.overlapY !== 0) {\n            toolsGame.mainElements.player.lostLife(player);\n          } //console.log(player.body.overlapY);\n\n        }\n      }, null, _this);\n      game.physics.arcade.collide(toolsGame.mainElements.intruzi.obj, toolsGame.mainElements.player.obj);\n    } // przeniesiona do gory - dotatkowy warunek jesli intruz dotyka dna mapy\n    // toolsGame.mainElements.intruzi.obj.forEach(function(intruz){\n    //     if(intruz.body.y+intruz.height === map.height*map.tileHeight) {\n    //         if(!intruz.killing) toolsGame.mainElements.intruzi.collisionIntruz(intruz,\"total-kill\");\n    //         intruz.killing=true;\n    //     }\n    // }, this, true);\n    // Shooting\n\n\n    if (toolsGame.mainElements.player.countBulletsF) {\n      if (toolsGame.mainElements.player.countBullets === 0) {\n        //console.log(\"end of ammunition\");\n        toolsGame.buttons.navigations.shot.alpha = 0;\n        toolsGame.buttons.navigations.shot.inputEnabled = false;\n      } else {\n        //console.log(\"you have ammunition\");\n        toolsGame.buttons.navigations.shot.alpha = 0.1;\n        toolsGame.buttons.navigations.shot.inputEnabled = true;\n      }\n\n      toolsGame.mainElements.player.countBulletsF = false;\n    }\n\n    if (timeLoop >= 120) timeLoop = 0;else timeLoop++; //console.log(timeLoop);\n    // tego uzyc zamiast detectionHoldOnObject ...\n    // toolsGame.mainElements.keys.obj.forEach(function(k){\n    //     console.log(game.physics.arcade.distanceBetween(toolsGame.mainElements.player.obj,k));\n    // }, this, true);\n\n    game.physics.arcade.overlap(toolsGame.mainElements.intruzi.obj, layer, function (intruz, lay) {\n      //console.log(game.physics.arcade.distanceBetween(toolsGame.mainElements.player.obj,intruz));\n      // if(toolsGame.mainElements.player.obj.position.x>intruz.position.x-game.width/1.5 &&\n      //     toolsGame.mainElements.player.obj.position.x<intruz.position.x+game.width/1.5 &&\n      //     toolsGame.mainElements.player.obj.position.y>intruz.position.y-game.height/1.5 &&\n      //     toolsGame.mainElements.player.obj.position.y<intruz.position.y+game.height/1.5) {\n      if (toolsGame.mainElements.player.detectionHoldOnObject(intruz, 1)) {\n        intruz.active = true;\n\n        if (intruz.alpha === 0) {\n          intruz.alpha = 1;\n        }\n      } else {\n        intruz.active = false;\n        intruz.alpha = 0;\n        intruz.body.velocity.x = 0;\n        intruz.animations.stop();\n      }\n\n      if (intruz.active) {\n        if (!intruz.timeLoop) {\n          intruz.timeLoop = 1;\n          toolsGame.mainElements.intruzi.id++;\n          intruz.id = toolsGame.mainElements.intruzi.id;\n          intruz[\"break\"] = 4000 * intruz.id; //console.log(\"intruz type: \" + intruz.type + \" loaded\");\n        } //if parzyste {} else {}\n        //console.log(intruz);\n\n\n        intruz.timeLoop++;\n        intruz.body.velocity.x = 0;\n\n        if (intruz.randomMove == 'intruzRight' || intruz.randomMove == 'intruzLeft') {\n          if (intruz.type === 1 || intruz.type === 4 || intruz.type === 5) {\n            if (intruz.body.blocked.left) {\n              if (intruz.type === 4) {\n                intruz.frame = 41; //intruz.animations.play('turn-left');\n                // setTimeout(function(){\n                //     intruz.frame=37;\n                // },30);\n                // setTimeout(function(){\n                //     intruz.randomMove='intruzLeft';\n                // },60);\n\n                game.time.events.add(30, function () {\n                  intruz.frame = 37;\n                }, this);\n                game.time.events.add(60, function () {\n                  intruz.randomMove = 'intruzLeft';\n                }, this);\n              } else intruz.randomMove = 'intruzLeft';\n\n              if (intruz.type === 5) {\n                toolsGame.audio.condor();\n              }\n            } else if (intruz.body.blocked.right) {\n              if (intruz.type === 4) {\n                intruz.frame = 40; // setTimeout(function(){\n                //     intruz.frame=37;\n                // },30);\n                // setTimeout(function(){\n                //     intruz.randomMove='intruzRight';\n                // },60);\n\n                game.time.events.add(30, function () {\n                  intruz.frame = 37;\n                }, this);\n                game.time.events.add(60, function () {\n                  intruz.randomMove = 'intruzRight';\n                }, this);\n              } else intruz.randomMove = 'intruzRight';\n\n              if (intruz.type === 5) {\n                toolsGame.audio.condor();\n              }\n            }\n          }\n\n          if (intruz.body.blocked.up) {\n            if (intruz.body.blocked.left) intruz.randomMove = 'intruzLeft';else if (intruz.body.blocked.right) intruz.randomMove = 'intruzRight';\n          }\n\n          if (intruz.type === 2 || intruz.type === 3) {\n            if (intruz.body.blocked.left || intruz.body.blocked.right) {\n              toolsGame.mainElements.intruzi.jump(intruz, 450); // var jumpTimerIntruz = 0;\n              // if (intruz.body.onFloor() && game.time.now > jumpTimerIntruz) {\n              //     intruz.body.velocity.y = -450;\n              //     jumpTimerIntruz = game.time.now + 450;\n              // }\n\n              if (timeLoop === 2) {\n                if (intruz.body.blocked.left) intruz.randomMove = 'intruzLeft';else if (intruz.body.blocked.right) intruz.randomMove = 'intruzRight';\n              }\n            }\n          }\n\n          if (intruz.type === 1 || intruz.type === 2 || intruz.type === 4 || intruz.type === 5) {\n            if (intruz.randomMove == 'intruzRight') {\n              if (intruz.type === 4) {\n                intruz.body.velocity.x = -intruz.randomSpeed / 2;\n              } else if (intruz.type === 5) {\n                intruz.body.velocity.x = -intruz.randomSpeed / 1.2;\n              } else {\n                if (intruz.deactiveVelocity) {\n                  if (intruz.deactiveVelocity === 'left') {\n                    intruz.body.velocity.x = -1000;\n                  } else {\n                    intruz.body.velocity.x = 1000;\n                  }\n\n                  toolsGame.mainElements.intruzi.jump(intruz, 200);\n                } else {\n                  intruz.body.velocity.x = -intruz.randomSpeed;\n                }\n              }\n\n              intruz.animations.play('left');\n              intruz.check = false;\n            } else if (intruz.randomMove == 'intruzLeft') {\n              if (intruz.type === 4) {\n                intruz.body.velocity.x = intruz.randomSpeed / 2;\n              } else if (intruz.type === 5) {\n                intruz.body.velocity.x = intruz.randomSpeed / 1.2;\n              } else {\n                if (intruz.deactiveVelocity) {\n                  if (intruz.deactiveVelocity === 'left') {\n                    intruz.body.velocity.x = -1000;\n                  } else {\n                    intruz.body.velocity.x = 1000;\n                  }\n\n                  toolsGame.mainElements.intruzi.jump(intruz, 200);\n                } else {\n                  intruz.body.velocity.x = intruz.randomSpeed;\n                }\n              }\n\n              intruz.animations.play('right');\n              intruz.check = false;\n            }\n          } else if (intruz.type === 3) {\n            if (intruz.randomMove == 'intruzRight') {\n              if (intruz.timeLoop >= 2000 + intruz[\"break\"] && intruz.timeLoop <= 4000 + intruz[\"break\"]) {\n                if (!intruz.check) {\n                  intruz.body.velocity.x = 0;\n                  intruz.animations.play('idle-left');\n                  intruz.randomMove = 'intruzLeft'; //console.log(\"x\");\n\n                  intruz.check = true;\n                }\n\n                if (intruz.killing) {\n                  //console.log(\"xKill\");\n                  intruz.animations.play('kill');\n                }\n              } else {\n                if (intruz.deactiveVelocity) {\n                  if (intruz.deactiveVelocity === 'left') {\n                    intruz.body.velocity.x = -1000;\n                  } else {\n                    intruz.body.velocity.x = 1000;\n                  }\n\n                  toolsGame.mainElements.intruzi.jump(intruz, 200);\n                } else {\n                  intruz.body.velocity.x = -intruz.randomSpeed;\n                }\n\n                intruz.animations.play('left');\n                intruz.check = false;\n              }\n            } else if (intruz.randomMove == 'intruzLeft') {\n              if (intruz.timeLoop >= 2000 + intruz[\"break\"] && intruz.timeLoop <= 4000 + intruz[\"break\"]) {\n                if (!intruz.check) {\n                  intruz.body.velocity.x = 0;\n                  intruz.animations.play('idle-right');\n                  intruz.randomMove = 'intruzRight'; //console.log(\"x\");\n\n                  intruz.check = true;\n                }\n\n                if (intruz.killing) {\n                  //console.log(\"xKill\");\n                  intruz.animations.play('kill');\n                }\n              } else {\n                if (intruz.deactiveVelocity) {\n                  if (intruz.deactiveVelocity === 'left') {\n                    intruz.body.velocity.x = -1000;\n                  } else {\n                    intruz.body.velocity.x = 1000;\n                  }\n\n                  toolsGame.mainElements.intruzi.jump(intruz, 200);\n                } else {\n                  intruz.body.velocity.x = intruz.randomSpeed;\n                }\n\n                intruz.animations.play('right');\n                intruz.check = false;\n              }\n            }\n          }\n\n          if (intruz.type === 5) {\n            if (intruz.body.blocked.down) {\n              //console.log(\"touch bottom lay\");\n              //console.log(intruz.body.blocked);\n              toolsGame.mainElements.intruzi.jump(intruz, 350);\n              toolsGame.audio.condor(); // var jumpTimerIntruz = 0;\n              // if (intruz.body.onFloor() && game.time.now > jumpTimerIntruz) {\n              //     intruz.body.velocity.y = -450;\n              //     jumpTimerIntruz = game.time.now + 450;\n              // }\n            }\n          }\n\n          if (!(intruz.timeLoop >= 1 && intruz.timeLoop <= 4000 + intruz[\"break\"])) {\n            intruz.timeLoop = 1;\n          }\n        } else if (intruz.randomMove === 'intruzIdleRight') {\n          intruz.animations.play('idle-right');\n        } else if (intruz.randomMove === 'intruzIdleLeft') {\n          intruz.animations.play('idle-left');\n        } else if (intruz.randomMove === 'intruzDelete') {\n          intruz.randomMove = parseInt(Math.random() * 2) ? 'intruzRight' : 'intruzLeft'; //var wsp=[], wspX=150, wspY=100;\n\n          var wsp = [],\n              wspX = intruz.wspStartX,\n              wspY = intruz.wspStartY; // console.log(intruz.wspStartY);\n          // console.log(intruz.wspStartX);\n\n          if (wspInkub.length > 0) {\n            //console.log(\"wsp inkub istnieje\");\n            var losoweWspInk = Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(0, wspInkub.length - 1); //console.log(\"nr: \" + losoweWspInk);\n            //console.log(losoweWspInk);\n\n            wsp = wspInkub[losoweWspInk].split(\",\");\n            wspX = parseInt(wsp[0] / tileSize);\n            wspY = parseInt(wsp[1] / tileSize); //console.log(wsp[0]/tileSize + \"x\" + wsp[1]/tileSize);\n          } //console.log(wspInkub);\n          //console.log(wspX + \",\" + wspY);\n          // intruz.body.x=wspX;\n          // intruz.body.y=wspY;\n\n\n          intruz.kill(); // setTimeout(function(){\n          //     toolsGame.mainElements.intruzi.add(wspX,wspY,intruz.type);\n          // }, randomBetween(3,6)*1000);\n          // if we want reactivate intruder:\n\n          game.time.events.add(Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"randomBetween\"])(3, 6) * 1000, function () {\n            toolsGame.mainElements.intruzi.add(wspX, wspY, intruz.type);\n          }, this); //intruz.alpha=1;\n        } else if (intruz.randomMove == 'intruzStop') {\n          if (intruz.type === 4 || intruz.type === 5) {//intruz.frame = 37;\n          } else {\n            intruz.frame = 37;\n          }\n        }\n      } //console.log(intruz.randomMove);\n\n    }, null, _this); // to uzyc przy dwoch roznych typach intruzow\n    // game.physics.arcade.collide(toolsGame.mainElements.intruzi.obj, toolsGame.mainElements.intruzi.obj, function(intruz){\n    //    toolsGame.intruzCollisonBack(intruz);\n    // \t//console.log(intruz.body.blocked.left);\n    // });\n\n    toolsGame.mainElements.player.obj.body.velocity.x = 0; //console.log(toolsGame.mainElements.player.obj.touchGround + \" and \" + levelFile.blockedKeys);\n\n    if (!levelFile.blockedKeys) // zmiana levelu - blokowanie klawiszy\n      {\n        // if(toolsGame.mainElements.player.obj.gForceWaterOnlyeOne && (cursors.up.isDown || cursors.left.isDown || cursors.right.isDown)) {\n        //     toolsGame.mainElements.player.obj.gForceWaterOnlyeOne = false;\n        // }\n        if (cursors.up.isDown) {\n          // if(toolsGame.mainElements.player.obj.onGround) {\n          //     toolsGame.mainElements.player.obj.onGround=false;\n          // }\n          if (facing === 'right') {\n            if (!toolsGame.mainElements.player.obj.touchGround) {\n              toolsGame.mainElements.player.obj.animations.play('jump-right');\n            }\n          } else if (facing === 'left') {\n            if (!toolsGame.mainElements.player.obj.touchGround) {\n              toolsGame.mainElements.player.obj.animations.play('jump-left');\n            }\n          } // toolsGame.mainElements.player.obj.touchGroundTime = setTimeout(function(){\n          // \tif(!levelFile.blockedKeys) {\n          //         if (facing === 'left') {\n          //             toolsGame.mainElements.player.obj.animations.play('left');\n          //         } else if (facing === 'right') {\n          //             toolsGame.mainElements.player.obj.animations.play('right');\n          //         }\n          //         toolsGame.mainElements.player.obj.touchGround=true;\n          // }\n          // },300);\n\n\n          toolsGame.mainElements.player.obj.touchGroundTime = game.time.events.add(300, function () {\n            if (!levelFile.blockedKeys) {\n              if (facing === 'left') {\n                toolsGame.mainElements.player.obj.animations.play('left');\n              } else if (facing === 'right') {\n                toolsGame.mainElements.player.obj.animations.play('right');\n              }\n\n              toolsGame.mainElements.player.obj.touchGround = true;\n            }\n          }, _this);\n        }\n\n        if (cursors.left.isDown) {\n          toolsGame.mainElements.player.obj.body.velocity.x = -200; // console.log(game.camera.x);\n          //if() bg.cameraOffset.x+=1;\n\n          if (facing != 'left') {\n            toolsGame.mainElements.player.obj.animations.play('left');\n            facing = 'left';\n          }\n        } else if (cursors.right.isDown) {\n          toolsGame.mainElements.player.obj.body.velocity.x = 200; //console.log(game.camera.x);\n          //bg.cameraOffset.x-=1;\n\n          if (facing != 'right') {\n            toolsGame.mainElements.player.obj.animations.play('right');\n            facing = 'right';\n          }\n        } else {\n          if (facing != 'idle') {\n            toolsGame.mainElements.player.obj.animations.stop();\n\n            if (facing == 'left') {\n              //toolsGame.mainElements.player.obj.frame = 0;\n              toolsGame.mainElements.player.obj.animations.play('idle-left');\n            } else {\n              //toolsGame.mainElements.player.obj.frame = 4;\n              toolsGame.mainElements.player.obj.animations.play('idle-right');\n            }\n\n            facing = 'idle';\n          }\n        }\n      } // camera and backing to other part screen\n    //console.log(game.camera.x);\n    // game.camera.follow();\n    // game.camera.x+=10;\n\n    /* aniamacja kladki itp */\n\n    /*\r\n    game.physics.arcade.collide(kladki, layer);\r\n    //console.log(kladki.children[0].body.blocked.right);\r\n    \t\tfor (var i = 0, len = kladki.children.length; i < len; i++) {\r\n    \t\t\tif(kladki.children[i].body.blocked.right) {\r\n    \t\tkladki.children[i].direction=\"left\";\r\n    \t}\r\n    \telse if(kladki.children[i].body.blocked.left) {\r\n    \t\tkladki.children[i].direction=\"right\";\r\n    \t}\r\n    \t\t\tif(kladki.children[i].direction==\"right\")\r\n    \t{\r\n    \t\tkladki.children[i].body.velocity.x = 100;\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\tkladki.children[i].body.velocity.x = -100;\r\n    \t}\r\n    \tkladki.children[i].isUp=false;\r\n    }\r\n    */\n\n\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.poziom.obj, layer);\n    game.physics.arcade.overlap(toolsGame.mainElements.kladki.poziom.obj, layer, function (kladka, lay) {\n      toolsGame.checkSpecialBlankBlockElement(lay);\n\n      if (kladka.body.blocked.right) {\n        kladka.direction = \"left\";\n      } else if (kladka.body.blocked.left) {\n        kladka.direction = \"right\";\n      }\n\n      if (kladka.direction == \"right\") {\n        kladka.body.velocity.x = 100;\n      } else {\n        kladka.body.velocity.x = -100;\n      }\n\n      kladka.isUp = false;\n    }, null, _this);\n    toolsGame.mainElements.player.obj.body.allowGravity = true;\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.poziom.obj, toolsGame.mainElements.player.obj, function (p, kladka) {\n      //console.log(kladka);\n      if (kladka.body.overlapY > 0) {\n        toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj, 'kladki-poziom');\n        toolsGame.mainElements.player.obj.body.allowGravity = true;\n        toolsGame.mainElements.player.obj.body.bounce.y = 0;\n        kladka.isUp = true;\n        toolsGame.mainElements.player.obj.body.velocity.x += kladka.body.velocity.x;\n        toolsGame.mainElements.player.obj.body.allowGravity = false; //console.log(toolsGame.mainElements.player.obj.body.allowGravity);\n\n        game.time.events.remove(toolsGame.mainElements.kladki.kladkaPlayerBounceReset);\n        toolsGame.mainElements.kladki.kladkaPlayerBounceReset = game.time.events.add(200, function () {\n          toolsGame.mainElements.player.obj.body.bounce.y = 0.3;\n        }, this); // clearTimeout(toolsGame.mainElements.kladki.kladkaPlayerBounceReset);\n        // toolsGame.mainElements.kladki.kladkaPlayerBounceReset=setTimeout(function(){\n        // \ttoolsGame.mainElements.player.obj.body.bounce.y = 0.3;\n        // },200);\n        //console.log(toolsGame.mainElements.player.obj.body.bounce.y + \" / \" + toolsGame.mainElements.player.obj.body.overlapY);\n      }\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.poziom.obj, toolsGame.mainElements.intruzi.obj, function (kladka, intruz) {//intruz.body.velocity.x += kladka.body.velocity.x;\n    }, null, _this); //console.log(toolsGame.mainElements.player.obj.body.bounce.y + \" / \" + toolsGame.mainElements.player.obj.body.overlapY);\n    //console.log(toolsGame.mainElements.player.obj.body.blocked.down);\n\n    /* end aniamacja kladki itp */\n    //\\\\ start\n    //game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTopBack.obj, toolsGame.mainElements.blankTileS.obj);\n\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTopBack.obj, toolsGame.mainElements.kladki.poziom.obj);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTopBack.obj, toolsGame.mainElements.intruzi.obj, function (k, intruz) {\n      //console.log(\"intruz vs kladka\");\n      toolsGame.intruzCollisonNoBack(intruz);\n    });\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTopBack.obj, toolsGame.mainElements.player.obj, function (k, p) {\n      if (p.body.overlapY > 0) {\n        //console.log(\"kladka pion top (auto back)\");\n        toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n        toolsGame.mainElements.kladki.run.startCollision(p, \"pionTopBack\");\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.kladki.pionTopBack.obj, layer, function (k, lay) {\n      toolsGame.checkSpecialBlankBlockElement(lay);\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTopBack.obj, layer, function (k, lay) {\n      toolsGame.mainElements.kladki.run.endCollision(k, \"pionTopBack\");\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottomBack.obj, toolsGame.mainElements.kladki.poziom.obj);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottomBack.obj, toolsGame.mainElements.intruzi.obj, function (k, intruz) {\n      //console.log(\"intruz vs kladka\");\n      toolsGame.intruzCollisonNoBack(intruz);\n    });\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottomBack.obj, toolsGame.mainElements.player.obj, function (k, p) {\n      if (p.body.overlapY > 0) {\n        //console.log(\"kladka pion bottom (auto back)\");\n        //console.log(\"test y\");\n        toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n        toolsGame.mainElements.kladki.run.startCollision(p, \"pionBottomBack\");\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.kladki.pionBottomBack.obj, layer, function (k, lay) {\n      toolsGame.checkSpecialBlankBlockElement(lay);\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottomBack.obj, layer, function (k, lay) {\n      toolsGame.mainElements.kladki.run.endCollision(k, \"pionBottomBack\");\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTop.obj, toolsGame.mainElements.kladki.poziom.obj);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTop.obj, toolsGame.mainElements.intruzi.obj, function (k, intruz) {\n      //console.log(\"intruz vs kladka\");\n      toolsGame.intruzCollisonNoBack(intruz);\n    });\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTop.obj, toolsGame.mainElements.player.obj, function (k, p) {\n      if (p.body.overlapY > 0) {\n        //console.log(\"kladka pion top\");\n        toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n        toolsGame.mainElements.kladki.run.startCollision(p, \"pionTop\");\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.kladki.pionTop.obj, layer, function (k, lay) {\n      toolsGame.checkSpecialBlankBlockElement(lay);\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionTop.obj, layer, function (k, lay) {\n      toolsGame.mainElements.kladki.run.endCollision(k, \"pionTop\");\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottom.obj, toolsGame.mainElements.kladki.poziom.obj);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottom.obj, toolsGame.mainElements.intruzi.obj, function (k, intruz) {\n      //console.log(\"intruz vs kladka\");\n      toolsGame.intruzCollisonNoBack(intruz);\n    });\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottom.obj, toolsGame.mainElements.player.obj, function (k, p) {\n      if (p.body.overlapY > 0) {\n        //console.log(\"kladka pion bottom\");\n        toolsGame.mainElements.player.checkIfWasKilledAndOther(toolsGame.mainElements.player.obj);\n        toolsGame.mainElements.kladki.run.startCollision(p, \"pionBottom\");\n      }\n    }, null, _this);\n    game.physics.arcade.overlap(toolsGame.mainElements.kladki.pionBottom.obj, layer, function (k, lay) {\n      toolsGame.checkSpecialBlankBlockElement(lay);\n    }, null, _this);\n    game.physics.arcade.collide(toolsGame.mainElements.kladki.pionBottom.obj, layer, function (k, lay) {\n      toolsGame.mainElements.kladki.run.endCollision(k, \"pionBottom\");\n    }, null, _this); //\\\\ end\n\n    /* teleporter postaci\r\n    console.log(toolsGame.mainElements.player.obj.body.x + \" : \" + toolsGame.mainElements.player.obj.body.y);\r\n    if(toolsGame.mainElements.player.obj.body.x>1200) {\r\n    \t//game.camera.follow(false);\r\n    \t//game.camera.follow(toolsGame.mainElements.intruzi.obj.children[0]);\r\n    \ttoolsGame.mainElements.player.obj.body.x=100;\r\n    \ttoolsGame.mainElements.player.obj.body.y=100;\r\n    \t//game.camera.follow(toolsGame.mainElements.player.obj);\r\n    \t//game.camera.follow(toolsGame.mainElements.player.obj, Phaser.Camera.FOLLOW_LOCKON, 0.05, 0.05);\r\n    \t\t}\r\n    /* end teleporter postaci */\n    // shot bullet whit gun \n\n    toolsGame.mainElements.player.gun.shot(toolsGame.mainElements.player); // visual gun\n\n    toolsGame.mainElements.player.gun.visualGun(toolsGame.mainElements.player); // visual fog\n\n    if (_typeof(proportiesMap[levelFile.activeIdLevel]) === 'object') {\n      if (proportiesMap[levelFile.activeIdLevel].fog && proportiesMap[levelFile.activeIdLevel].fogSpeed) {\n        if (oFog.x >= -2500) oFog.x = -3000;else oFog.x += proportiesMap[levelFile.activeIdLevel].fogSpeed; //console.log(oFog.x);\n      }\n    } //console.log(bg.position.x);\n    // parallaxa backgroundu\n\n\n    if (levelFile.backgroundParallax) {\n      if (proportiesMap[levelFile.activeIdLevel].background) {\n        var backgroundMoveX = 0;\n\n        if (proportiesMap[levelFile.activeIdLevel].backgroundMoveX) {\n          backgroundMoveX = -proportiesMap[levelFile.activeIdLevel].backgroundMoveX;\n        }\n\n        bg.cameraOffset.x = backgroundMoveX - 200 - game.camera.x / 15;\n      }\n\n      if (proportiesMap[levelFile.activeIdLevel].backgroundSecond) {\n        bg2.cameraOffset.x = -game.camera.x / 8;\n      }\n    } // if (toolsGame.mainElements.player.numberLifes < 1) {\n    //     toolsGame.mainElements.player.obj.animations.play('kill-right');\n    // }\n\n\n    if (toolsGame.mainElements.player.generateAgain && !toolsGame.mainElements.player.gameOver) {\n      toolsGame.mainElements.player.obj.body.x = saveX;\n      toolsGame.mainElements.player.obj.body.y = saveY;\n      toolsGame.mainElements.player.obj.alpha = 1;\n      toolsGame.mainElements.player.obj.play(\"idle-right\");\n      toolsGame.mainElements.player.generateAgain = false;\n    } //toolsGame.mainElements.intruzi.obj.children\n    //(toolsGame.mainElements.intruzi.obj.children[0].indexOf(\"intruzStop\") !== -1)\n    //console.log(toolsGame.mainElements.player.obj.body.onFloor());\n\n\n    if (jumpButton.isDown && (toolsGame.mainElements.player.obj.body.onFloor() || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('intruzi', toolsGame.mainElements.intruzi.obj.children, 'intruzStop') || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('kladki', toolsGame.mainElements.logs.obj.children, true) || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('kladki', toolsGame.mainElements.kladki.poziom.obj.children, true) || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('kladki', toolsGame.mainElements.kladki.pionTopBack.obj.children, true) || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('kladki', toolsGame.mainElements.kladki.pionBottomBack.obj.children, true) || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('kladki', toolsGame.mainElements.kladki.pionTop.obj.children, true) || Object(_varibles__WEBPACK_IMPORTED_MODULE_1__[\"inArrayObject\"])('kladki', toolsGame.mainElements.kladki.pionBottom.obj.children, true)) && game.time.now > toolsGame.mainElements.player.jumpTimer) {\n      if (!levelFile.blockedKeys) {\n        if (!toolsGame.mainElements.player.obj.gForceWater) {\n          toolsGame.mainElements.player.obj.body.velocity.y = -toolsGame.mainElements.player.velocityNormal;\n          toolsGame.mainElements.player.jumpTimer = game.time.now + toolsGame.mainElements.player.velocityNormal;\n        } else {\n          toolsGame.mainElements.player.obj.body.velocity.y = -toolsGame.mainElements.player.velocityWater;\n          toolsGame.mainElements.player.jumpTimer = game.time.now + toolsGame.mainElements.player.velocityWater;\n        }\n\n        if (!toolsGame.mainElements.player.obj.body.bounce.y) {\n          toolsGame.mainElements.player.obj.body.bounce.y = 0.3;\n        }\n      }\n    }\n\n    if (!toolsGame.mainElements.player.obj.t1) {\n      toolsGame.mainElements.player.obj.onGround = false;\n    }\n\n    if (!theEndCredits) {\n      // game.time.advancedTiming = true;﻿\n      // toolsGame.text.show(false,\n      //     (toolsGame.windows.boxMenu.obj)?3*tileSize:tileSize,\n      //     (toolsGame.windows.boxMenu.obj)?7*tileSize:5*tileSize,\n      //     1,\n      //     (\n      //         \"timeLoop: \" + timeLoop + \"\\n\" +\n      //         \"level \" + levelFile.activeIdLevel + \"\\n\" +\n      //         'Timer: ' + timerTotal + \"\\n\" +\n      //         '\\u2764 Main Lifes x ' + toolsGame.mainElements.player.numberMainLifes + \"\\n\" +\n      //         '\\u2661 Life x ' +  toolsGame.mainElements.player.numberLifes + \"\\n\" +\n      //         'Current gold record: ' + ((toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory>toolsGame.mainElements.player.numberCoinsLevelProcent)?toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory + '%':'-') + \"\\n\" +\n      //         'Golds: ' +  toolsGame.mainElements.player.numberCoins + ' (' + toolsGame.mainElements.player.numberCoinsLevelProcent + '%)' + \"\\n\" +\n      //         '\\u204D bullets: ' + toolsGame.mainElements.player.countBullets + \"\\n\" +\n      //         '\\u26BF keys: ' + keys + \"\\n\" +\n      //         \"FPS: \" + game.time.fps\n      //     ),\n      //     '700 12px Arial' ,'#ded4b8',true,'infogame',true\n      // );\n      toolsGame.windows.boxTopMenu.letAlways.show();\n\n      if (!toolsGame.windows.boxTopMenu.f) {\n        toolsGame.windows.boxTopMenu[\"let\"].show();\n        toolsGame.windows.boxTopMenu.f = true;\n      }\n    } //+ timer.duration.toFixed(0)\n\n  }\n};\n\nvar correctCookiesProcent = function correctCookiesProcent() {\n  console.log(\"########### Correct procent #############\");\n\n  if (toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory > toolsGame.mainElements.player.numberCoinsLevelProcent) {\n    toolsGame.mainElements.player.numberCoinsLevelProcent = toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory;\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('coins-procent-' + levelFile.activeIdLevel, toolsGame.mainElements.player.numberCoinsLevelProcentLastMemory);\n  }\n};\n\nvar cookiesLastLevelMemory = function cookiesLastLevelMemory() {\n  if (Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-last-memory') > 0 && Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('id-level-last-memory') > 0) {\n    console.log(\"################# cookies last level and last ID #################\");\n    console.log(Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('id-level-last-memory') + \" = prcent:\" + Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-last-memory'));\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('coins-procent-' + Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('id-level-last-memory'), Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('coins-procent-last-memory'));\n    Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"setCookies\"])('id-level-last-memory', Object(_cookies__WEBPACK_IMPORTED_MODULE_0__[\"getCookies\"])('id-level-last-memory'));\n  }\n};\n\ncookiesLastLevelMemory();\n\nvar endGame = function endGame() {\n  if (playGame.main) {\n    console.log(\"########### end game #############\");\n    game.world.removeAll();\n    timer.destroy();\n    toolsGame.audio.bg.stop();\n    playGame.main = false; // deactive Game Over flag;\n\n    toolsGame.mainElements.player.gameOver = false;\n    create();\n  } else {//navigator.app.exitApp();\n  }\n};\n\nvar render = function render() {//game.debug.text(game.time.physicsElapsed, 32, 32);\n  //game.debug.bodyInfo(toolsGame.mainElements.player.obj, 16, 24);\n  //if(toolsGame.mainElements.intruzi.obj.children[0]) game.debug.body(toolsGame.mainElements.intruzi.obj.children[0]);\n  //if(toolsGame.mainElements.intruzi.obj.children[0]) game.debug.bodyInfo(toolsGame.mainElements.intruzi.obj.children[0], 16, 24);\n  //console.log(\"x-game.load.onLoadStart\");\n};\n\nvar game = new Phaser.Game(800, 450, Phaser.CANVAS, 'game-content', {\n  preload: preload,\n  create: create,\n  update: update,\n  render: render\n});\n\n//# sourceURL=webpack:///./www/js/main.js?");

/***/ }),

/***/ "./www/js/varibles.js":
/*!****************************!*\
  !*** ./www/js/varibles.js ***!
  \****************************/
/*! exports provided: detectionDevice, isEven, inArrayObject, inArray, isExists, removeA, randomBetween, triggerKeyboardEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"detectionDevice\", function() { return detectionDevice; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEven\", function() { return isEven; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inArrayObject\", function() { return inArrayObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inArray\", function() { return inArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isExists\", function() { return isExists; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeA\", function() { return removeA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomBetween\", function() { return randomBetween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerKeyboardEvent\", function() { return triggerKeyboardEvent; });\nvar _arguments = arguments;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar dD = function dD() {\n  if ((typeof cordova === \"undefined\" ? \"undefined\" : _typeof(cordova)) === \"object\") {\n    return window.cordova.platformId === \"android\" ? true : false;\n  } else {\n    return false;\n  }\n};\n\nvar detectionDevice = dD();\nvar isEven = function isEven(n) {\n  return n == parseFloat(n) ? !(n % 2) : void 0;\n};\nvar inArrayObject = function inArrayObject(nameArray, myArray, myValue) {\n  var inArrayObject = false;\n\n  for (var i = 0, iLength = myArray.length; i < iLength; i++) {\n    if (nameArray == \"intruzi\") {\n      if (myArray[i].randomMove == myValue) inArrayObject = true;\n    } else if (nameArray == \"kladki\") {\n      if (myArray[i].isUp == myValue) inArrayObject = true;\n    }\n  }\n\n  return inArrayObject;\n};\nvar inArray = function inArray(myArray, myValue) {\n  var inArray = false;\n  myArray.map(function (key) {\n    if (key === myValue) {\n      inArray = true;\n    }\n  });\n  return inArray;\n};\nvar isExists = function isExists(o) {\n  var isO = false;\n\n  if (typeof o !== 'undefined') {\n    isO = true;\n  }\n\n  return isO;\n};\nvar removeA = function removeA(arr) {\n  var what,\n      a = _arguments,\n      L = a.length,\n      ax;\n\n  while (L > 1 && arr.length) {\n    what = a[--L];\n\n    while ((ax = arr.indexOf(what)) !== -1) {\n      arr.splice(ax, 1);\n    }\n  }\n\n  return arr;\n};\nvar randomBetween = function randomBetween(min, max) {\n  min = parseInt(min, 10);\n  max = parseInt(max, 10);\n\n  if (min > max) {\n    var tmp = min;\n    min = max;\n    max = tmp;\n  }\n\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nvar triggerKeyboardEvent = function triggerKeyboardEvent(el, keyC, typeKey) {\n  var eventObj = document.createEvent(\"Events\");\n  eventObj.initEvent(typeKey, true, true);\n  eventObj.keyCode = keyC;\n  eventObj.which = keyC;\n  el.dispatchEvent(eventObj);\n};\n\n//# sourceURL=webpack:///./www/js/varibles.js?");

/***/ })

/******/ });